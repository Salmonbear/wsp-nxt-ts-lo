// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sj7u5T6A4j1Xdo61ZkYEWA
// Component: PK-Y3inPWCoy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import GlobalHeader2 from "../../GlobalHeader2"; // plasmic-import: DWQ8Kd-IAGYP/component
import { AntdSteps } from "@plasmicpkgs/antd5/skinny/registerSteps";
import Button from "../../Button"; // plasmic-import: Dy4L9PNlqEQ/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantszbPet7MzObh } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: zbPET7mzOBH/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sj7u5T6A4j1Xdo61ZkYEWA/projectcss
import sty from "./PlasmicFinalNewWizard.module.css"; // plasmic-import: PK-Y3inPWCoy/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: mDNbn1ZLKrHu/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 5HAw4RHFxpJq/icon

createPlasmicElementProxy;

export type PlasmicFinalNewWizard__VariantMembers = {};
export type PlasmicFinalNewWizard__VariantsArgs = {};
type VariantPropType = keyof PlasmicFinalNewWizard__VariantsArgs;
export const PlasmicFinalNewWizard__VariantProps = new Array<VariantPropType>();

export type PlasmicFinalNewWizard__ArgsType = {};
type ArgPropType = keyof PlasmicFinalNewWizard__ArgsType;
export const PlasmicFinalNewWizard__ArgProps = new Array<ArgPropType>();

export type PlasmicFinalNewWizard__OverridesType = {
  root?: Flex__<"div">;
  globalHeader2?: Flex__<typeof GlobalHeader2>;
  steps?: Flex__<typeof AntdSteps>;
  form?: Flex__<typeof FormWrapper>;
  input?: Flex__<typeof AntdInput>;
  input2?: Flex__<typeof AntdInput>;
  input3?: Flex__<typeof AntdInput>;
  select?: Flex__<typeof AntdSelect>;
  input4?: Flex__<typeof AntdInput>;
  input5?: Flex__<typeof AntdInput>;
  input6?: Flex__<typeof AntdInput>;
  input7?: Flex__<typeof AntdInput>;
  textArea?: Flex__<typeof AntdTextArea>;
  input8?: Flex__<typeof AntdInput>;
  textArea2?: Flex__<typeof AntdTextArea>;
  firstNameInput?: Flex__<typeof FormItemWrapper>;
  inputFirstName?: Flex__<typeof AntdInput>;
  emailInput?: Flex__<typeof FormItemWrapper>;
  inputEmail?: Flex__<typeof AntdInput>;
  speechApi?: Flex__<typeof DataFetcher>;
  lottie?: Flex__<typeof LottieWrapper>;
  verticalCta?: Flex__<"section">;
};

export interface DefaultFinalNewWizardProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFinalNewWizard__RenderFunc(props: {
  variants: PlasmicFinalNewWizard__VariantsArgs;
  args: PlasmicFinalNewWizard__ArgsType;
  overrides: PlasmicFinalNewWizard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "inputFirstName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputEmail.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "steps.current",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "submissionValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "textArea2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszbPet7MzObh()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <GlobalHeader2
            data-plasmic-name={"globalHeader2"}
            data-plasmic-override={overrides.globalHeader2}
            className={classNames("__wab_instance", sty.globalHeader2)}
          />

          {(() => {
            try {
              return $state.steps.current !== 11;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <section className={classNames(projectcss.all, sty.section__eFpyR)}>
              {(() => {
                try {
                  return $state.submissionValue === "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <AntdSteps
                  data-plasmic-name={"steps"}
                  data-plasmic-override={overrides.steps}
                  className={classNames("__wab_instance", sty.steps)}
                  current={generateStateValueProp($state, ["steps", "current"])}
                  direction={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "horizontal"
                      : undefined
                  }
                  items={[{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]}
                  onChange={generateStateOnChangeProp($state, [
                    "steps",
                    "current"
                  ])}
                  progressDot={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? false
                      : undefined
                  }
                  responsive={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : undefined
                  }
                  type={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "inline"
                      : undefined
                  }
                />
              ) : null}
              {(() => {
                try {
                  return $state.submissionValue === "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__dlD9J)}>
                  {(() => {
                    try {
                      return $state.steps.current === 0;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__jEuz)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__enbIq
                        )}
                      >
                        {"Ready to nail your speech? Lets get started! "}
                      </div>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__nfyz7
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateInput3Value"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["steps", "current"]
                                  },
                                  operation: 2,
                                  value: encodeURIComponent(
                                    JSON.stringify({
                                      formSubmission: {
                                        brideName: "Emily",
                                        groomName: "Michael",
                                        relationshipToSpeaker: "Friend",
                                        howTheyMet: "College",
                                        firstImpression:
                                          "Instant connection and shared love for art",
                                        funnyStory:
                                          "The time they accidentally went to a costume party without costumes",
                                        sharedHobbies:
                                          "Hiking, cooking, and traveling",
                                        memorableTrip:
                                          "Trip to Italy where they got engaged",
                                        qualitiesAdmired:
                                          "Emily's compassion and Michael's sense of humor",
                                        wishesForCouple:
                                          "A lifetime of happiness, adventure, and growth",
                                        specialMessage:
                                          "Remember to always communicate and cherish each moment together",
                                        closingRemark:
                                          "To Emily and Michael, may your love be as endless as your wedding rings"
                                      }
                                    })
                                  )
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateInput3Value"] != null &&
                            typeof $steps["updateInput3Value"] === "object" &&
                            typeof $steps["updateInput3Value"].then ===
                              "function"
                          ) {
                            $steps["updateInput3Value"] = await $steps[
                              "updateInput3Value"
                            ];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gSj7K
                          )}
                        >
                          {"Let's Go!"}
                        </div>
                      </Button>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                    ? (() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.form),
                          extendedOnValuesChange:
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["form", "value"],
                              FormWrapper_Helpers
                            ),
                          formItems: [
                            { label: "Name", name: "name", inputType: "Text" },
                            {
                              label: "Message",
                              name: "message",
                              inputType: "Text Area"
                            }
                          ],
                          labelCol: { span: 8, horizontalOnly: true },
                          layout: "vertical",
                          mode: "advanced",
                          onFinish: async values => {
                            const $steps = {};

                            $steps["updateSubmissionValue"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["submissionValue"]
                                    },
                                    operation: 0,
                                    value: encodeURIComponent($state.form.value)
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateSubmissionValue"] != null &&
                              typeof $steps["updateSubmissionValue"] ===
                                "object" &&
                              typeof $steps["updateSubmissionValue"].then ===
                                "function"
                            ) {
                              $steps["updateSubmissionValue"] = await $steps[
                                "updateSubmissionValue"
                              ];
                            }
                          },
                          onIsSubmittingChange:
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "isSubmitting",
                              ["form", "isSubmitting"],
                              FormWrapper_Helpers
                            ),
                          ref: ref => {
                            $refs["form"] = ref;
                          },
                          requiredMark: false,
                          submitSlot: null,
                          wrapperCol: { span: 16, horizontalOnly: true }
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "form.value"
                            },
                            {
                              name: "isSubmitting",
                              plasmicStateName: "form.isSubmitting"
                            }
                          ],
                          [],
                          FormWrapper_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <FormWrapper
                            data-plasmic-name={"form"}
                            data-plasmic-override={overrides.form}
                            {...child$Props}
                          >
                            {(() => {
                              try {
                                return $state.steps.current === 1;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__oCxkl
                                )}
                                hidden={undefined}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__gKbSr
                                    )}
                                  >
                                    {"Right, lets start with your first name"}
                                  </div>
                                }
                                name={"firstName"}
                                rules={[
                                  {
                                    ruleType: "required",
                                    message: "This field is required"
                                  }
                                ]}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input
                                    ),
                                    onChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input", "value"],
                                        AntdInput_Helpers
                                      ),
                                    size: "large",
                                    type: "text",
                                    value: generateStateValueProp($state, [
                                      "input",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input.value"
                                      }
                                    ],
                                    [],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input"}
                                      data-plasmic-override={overrides.input}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            ) : null}
                            {(() => {
                              try {
                                return $state.steps.current === 2;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField___537Nw
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__o1Mlb
                                    )}
                                  >
                                    {"Great, now what's your email address?"}
                                  </div>
                                }
                                name={"userEmail"}
                                rules={[
                                  {
                                    ruleType: "required",
                                    message: "This field is required"
                                  }
                                ]}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input2
                                    ),
                                    onChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input2", "value"],
                                        AntdInput_Helpers
                                      ),
                                    size: "large",
                                    value: generateStateValueProp($state, [
                                      "input2",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input2.value"
                                      }
                                    ],
                                    [],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input2"}
                                      data-plasmic-override={overrides.input2}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            ) : null}
                            {(() => {
                              try {
                                return $state.steps.current === 3;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__hAqFp
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___46Bbn
                                    )}
                                  >
                                    {"What type of speech are you giving?"}
                                  </div>
                                }
                                name={"weddingSpeechType"}
                                rules={[
                                  {
                                    ruleType: "required",
                                    message: "This field is required"
                                  }
                                ]}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input3
                                    ),
                                    onChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input3", "value"],
                                        AntdInput_Helpers
                                      ),
                                    size: "large",
                                    value: generateStateValueProp($state, [
                                      "input3",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input3.value"
                                      }
                                    ],
                                    [],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input3"}
                                      data-plasmic-override={overrides.input3}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            ) : null}
                            {(() => {
                              try {
                                return $state.steps.current === 4;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__ntTL
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__vTUpc
                                    )}
                                  >
                                    {
                                      "Who will your speech be mainly addressed to?"
                                    }
                                  </div>
                                }
                                name={"recipientType"}
                                rules={[
                                  {
                                    ruleType: "required",
                                    message: "This field is required"
                                  }
                                ]}
                              >
                                <AntdSelect
                                  data-plasmic-name={"select"}
                                  data-plasmic-override={overrides.select}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.select
                                  )}
                                  defaultStylesClassName={classNames(
                                    projectcss.root_reset,
                                    projectcss.plasmic_default_styles,
                                    projectcss.plasmic_mixins,
                                    projectcss.plasmic_tokens,
                                    plasmic_antd_5_hostless_css.plasmic_tokens,
                                    plasmic_plasmic_rich_components_css.plasmic_tokens
                                  )}
                                  onChange={generateStateOnChangeProp($state, [
                                    "select",
                                    "value"
                                  ])}
                                  options={(() => {
                                    const __composite = [
                                      {
                                        type: "option",
                                        label: null,
                                        value: null
                                      },
                                      {
                                        type: "option",
                                        label: null,
                                        value: null
                                      }
                                    ];
                                    __composite["0"]["label"] = "Bride";
                                    __composite["0"]["value"] = "bride";
                                    __composite["1"]["label"] = "Groom";
                                    __composite["1"]["value"] = "Groom";
                                    return __composite;
                                  })()}
                                  placeholder={"Select..."}
                                  popupScopeClassName={sty["select__popup"]}
                                  size={"large"}
                                  value={generateStateValueProp($state, [
                                    "select",
                                    "value"
                                  ])}
                                />
                              </FormItemWrapper>
                            ) : null}
                            {(() => {
                              try {
                                return $state.steps.current === 5;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__gn4Uc
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__wa11J
                                    )}
                                  >
                                    {"Thanks. And what's their first name?"}
                                  </div>
                                }
                                name={"recipientName"}
                                rules={[
                                  {
                                    ruleType: "required",
                                    message: "This field is required"
                                  }
                                ]}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input4
                                    ),
                                    onChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input4", "value"],
                                        AntdInput_Helpers
                                      ),
                                    size: "large",
                                    value: generateStateValueProp($state, [
                                      "input4",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input4.value"
                                      }
                                    ],
                                    [],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input4"}
                                      data-plasmic-override={overrides.input4}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            ) : null}
                            {(() => {
                              try {
                                return $state.steps.current === 6;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__s0Xk5
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__g8Ic7
                                    )}
                                  >
                                    {"How would you describe them in 3 words?"}
                                  </div>
                                }
                                name={"recipientDescription"}
                                rules={[
                                  {
                                    ruleType: "required",
                                    message: "This field is required"
                                  }
                                ]}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input5
                                    ),
                                    onChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input5", "value"],
                                        AntdInput_Helpers
                                      ),
                                    size: "large",
                                    value: generateStateValueProp($state, [
                                      "input5",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input5.value"
                                      }
                                    ],
                                    [],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input5"}
                                      data-plasmic-override={overrides.input5}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            ) : null}
                            {(() => {
                              try {
                                return $state.steps.current === 7;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__qch7G
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__kbU5E
                                    )}
                                  >
                                    {"What's the name of their partner"}
                                  </div>
                                }
                                name={"partnerName"}
                                rules={[
                                  {
                                    ruleType: "required",
                                    message: "This field is required"
                                  }
                                ]}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input6
                                    ),
                                    onChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input6", "value"],
                                        AntdInput_Helpers
                                      ),
                                    size: "large",
                                    value: generateStateValueProp($state, [
                                      "input6",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input6.value"
                                      }
                                    ],
                                    [],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input6"}
                                      data-plasmic-override={overrides.input6}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            ) : null}
                            {(() => {
                              try {
                                return $state.steps.current === 8;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__sYoQ
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__cUioP
                                    )}
                                  >
                                    {
                                      "How would you describe their partner, in 3 words?"
                                    }
                                  </div>
                                }
                                name={"describePartner3words"}
                                rules={[
                                  {
                                    ruleType: "required",
                                    message: "This field is required"
                                  }
                                ]}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input7
                                    ),
                                    onChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input7", "value"],
                                        AntdInput_Helpers
                                      ),
                                    size: "large",
                                    value: generateStateValueProp($state, [
                                      "input7",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input7.value"
                                      }
                                    ],
                                    [],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input7"}
                                      data-plasmic-override={overrides.input7}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            ) : null}
                            {(() => {
                              try {
                                return $state.steps.current === 9;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__itHnB
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__yMv5I
                                    )}
                                  >
                                    {
                                      "When did you meet their partner? What was your first impression?"
                                    }
                                  </div>
                                }
                                name={"firstMetfPartner"}
                                rules={[
                                  {
                                    ruleType: "required",
                                    message: "This field is required"
                                  }
                                ]}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.textArea
                                    ),
                                    onChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["textArea", "value"],
                                        AntdTextArea_Helpers
                                      ),
                                    value: generateStateValueProp($state, [
                                      "textArea",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "textArea.value"
                                      }
                                    ],
                                    [],
                                    AntdTextArea_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdTextArea
                                      data-plasmic-name={"textArea"}
                                      data-plasmic-override={overrides.textArea}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            ) : null}
                            {(() => {
                              try {
                                return $state.steps.current === 10;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__ns8W
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__mLqrx
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (
                                            "Tell us some stories about " +
                                            $state.form.value.recipientName +
                                            ", to include in your speech"
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Tell us stories about ";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                }
                                name={"storiesAboutRecipient"}
                                rules={[
                                  {
                                    ruleType: "required",
                                    message: "This field is required"
                                  }
                                ]}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input8
                                    ),
                                    onChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input8", "value"],
                                        AntdInput_Helpers
                                      ),
                                    size: "large",
                                    value: generateStateValueProp($state, [
                                      "input8",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input8.value"
                                      }
                                    ],
                                    [],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input8"}
                                      data-plasmic-override={overrides.input8}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__qdp9Z
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return "Tell us 1 to 3 stories and let us know why they're special to include in the speech.";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Tell us stories about ";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </FormItemWrapper>
                            ) : null}
                            {(() => {
                              try {
                                return $state.steps.current === 11;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__n4Fdh
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__xCwSe
                                    )}
                                  >
                                    {
                                      "Is there any key message you want your speech to get across?"
                                    }
                                  </div>
                                }
                                name={"keyMessageOfSpeech"}
                                rules={[
                                  {
                                    ruleType: "required",
                                    message: "This field is required"
                                  }
                                ]}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.textArea2
                                    ),
                                    onChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["textArea2", "value"],
                                        AntdTextArea_Helpers
                                      ),
                                    value: generateStateValueProp($state, [
                                      "textArea2",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "textArea2.value"
                                      }
                                    ],
                                    [],
                                    AntdTextArea_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdTextArea
                                      data-plasmic-name={"textArea2"}
                                      data-plasmic-override={
                                        overrides.textArea2
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            ) : null}
                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button__ojJp7
                              )}
                              danger={false}
                              ghost={true}
                              loading={false}
                              submitsForm={false}
                              type={"primary"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__jXv1
                                )}
                              >
                                {"Submit"}
                              </div>
                            </AntdButton>
                          </FormWrapper>
                        );
                      })()
                    : null}
                  {(() => {
                    try {
                      return (
                        $state.steps.current > 0 && $state.steps.current < 12
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.columns__nImuu)}
                    >
                      <div
                        className={classNames(projectcss.all, sty.column___7Vi)}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__sq4EM
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateSteps2Current"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["steps", "current"]
                                    },
                                    operation: 3
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const oldValue = $stateGet(
                                      objRoot,
                                      variablePath
                                    );
                                    $stateSet(
                                      objRoot,
                                      variablePath,
                                      oldValue - 1
                                    );
                                    return oldValue - 1;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateSteps2Current"] != null &&
                              typeof $steps["updateSteps2Current"] ===
                                "object" &&
                              typeof $steps["updateSteps2Current"].then ===
                                "function"
                            ) {
                              $steps["updateSteps2Current"] = await $steps[
                                "updateSteps2Current"
                              ];
                            }
                          }}
                        >
                          {"<"}
                        </Button>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__zcRmc
                        )}
                      >
                        {(() => {
                          try {
                            return $state.steps.current !== 10;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__kZrLb
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateSteps2Current"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["steps", "current"]
                                      },
                                      operation: 2
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        oldValue + 1
                                      );
                                      return oldValue + 1;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateSteps2Current"] != null &&
                                typeof $steps["updateSteps2Current"] ===
                                  "object" &&
                                typeof $steps["updateSteps2Current"].then ===
                                  "function"
                              ) {
                                $steps["updateSteps2Current"] = await $steps[
                                  "updateSteps2Current"
                                ];
                              }
                            }}
                          >
                            {">"}
                          </Button>
                        ) : null}
                        {(() => {
                          try {
                            return (
                              $state.steps.current === 10 &&
                              $state.submissionValue === ""
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button___9ZxC
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateInput3Value"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["submissionValue"]
                                      },
                                      operation: 0,
                                      value: encodeURIComponent(
                                        JSON.stringify($state.form.value)
                                      )
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateInput3Value"] != null &&
                                typeof $steps["updateInput3Value"] ===
                                  "object" &&
                                typeof $steps["updateInput3Value"].then ===
                                  "function"
                              ) {
                                $steps["updateInput3Value"] = await $steps[
                                  "updateInput3Value"
                                ];
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rhQjV
                              )}
                            >
                              {"Submit"}
                            </div>
                          </Button>
                        ) : null}
                      </div>
                    </div>
                  ) : null}
                </div>
              ) : null}
              <div className={classNames(projectcss.all, sty.freeBox___0YZue)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aMqKe
                  )}
                >
                  {"Right, lets start with your first name"}
                </div>
                <FormItemWrapper
                  data-plasmic-name={"firstNameInput"}
                  data-plasmic-override={overrides.firstNameInput}
                  className={classNames("__wab_instance", sty.firstNameInput)}
                  hidden={false}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__g98Aa
                      )}
                    >
                      {"Right, let's start with your first name"}
                    </div>
                  }
                  name={"firstName"}
                  noLabel={true}
                  noStyle={false}
                  rules={[{ ruleType: "required" }]}
                >
                  {(() => {
                    const child$Props = {
                      bordered: true,
                      className: classNames(
                        "__wab_instance",
                        sty.inputFirstName
                      ),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["inputFirstName", "value"],
                          AntdInput_Helpers
                        ).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateInputFirstNameValue"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["inputFirstName", "value"]
                                  },
                                  operation: 0,
                                  value: $state.inputFirstName.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateInputFirstNameValue"] != null &&
                            typeof $steps["updateInputFirstNameValue"] ===
                              "object" &&
                            typeof $steps["updateInputFirstNameValue"].then ===
                              "function"
                          ) {
                            $steps["updateInputFirstNameValue"] = await $steps[
                              "updateInputFirstNameValue"
                            ];
                          }
                        }).apply(null, eventArgs);
                      },
                      size: "large",
                      value: generateStateValueProp($state, [
                        "inputFirstName",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "inputFirstName.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"inputFirstName"}
                        data-plasmic-override={overrides.inputFirstName}
                        {...child$Props}
                      />
                    );
                  })()}
                </FormItemWrapper>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___6HKvM)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hLtmD
                  )}
                >
                  {"Great, now what's your email address?"}
                </div>
                <FormItemWrapper
                  data-plasmic-name={"emailInput"}
                  data-plasmic-override={overrides.emailInput}
                  className={classNames("__wab_instance", sty.emailInput)}
                  hidden={false}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__utgKa
                      )}
                    >
                      {"Right, let's start with your first name"}
                    </div>
                  }
                  name={"yourEmail"}
                  noLabel={true}
                  noStyle={false}
                  rules={[{ ruleType: "required" }]}
                >
                  {(() => {
                    const child$Props = {
                      bordered: true,
                      className: classNames("__wab_instance", sty.inputEmail),
                      onChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["inputEmail", "value"],
                        AntdInput_Helpers
                      ),
                      size: "large",
                      value: generateStateValueProp($state, [
                        "inputEmail",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "inputEmail.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"inputEmail"}
                        data-plasmic-override={overrides.inputEmail}
                        {...child$Props}
                      />
                    );
                  })()}
                </FormItemWrapper>
              </div>
              {(() => {
                try {
                  return $state.submissionValue !== "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <DataFetcher
                  data-plasmic-name={"speechApi"}
                  data-plasmic-override={overrides.speechApi}
                  className={classNames("__wab_instance", sty.speechApi)}
                  dataName={"firstSpeechTruncated"}
                  errorDisplay={
                    <DataCtxReader__>
                      {$ctx => "Error fetching data"}
                    </DataCtxReader__>
                  }
                  errorName={"fetchError"}
                  headers={{
                    "Content-Type": "application/json",
                    Accept: "application/json",
                    Authorization: "Bearer 4bd256429670934e855b7aa2fb1ff5fc"
                  }}
                  loadingDisplay={
                    <DataCtxReader__>
                      {$ctx => (
                        <section
                          className={classNames(
                            projectcss.all,
                            sty.section___6NxSc
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__v6CnZ
                            )}
                          >
                            {
                              "Thanks!\nWe're taking your information \nand building your speeches"
                            }
                          </div>
                          <LottieWrapper
                            data-plasmic-name={"lottie"}
                            data-plasmic-override={overrides.lottie}
                            animationData={{
                              nm: "Comp 1",
                              mn: "",
                              layers: [
                                {
                                  ty: 4,
                                  nm: "heart2 Outlines",
                                  mn: "",
                                  sr: 1,
                                  st: 0,
                                  op: 900.000036657751,
                                  ip: 0,
                                  hd: false,
                                  cl: "",
                                  ln: "",
                                  ddd: 0,
                                  bm: 0,
                                  hasMask: false,
                                  ao: 0,
                                  ks: {
                                    a: { a: 0, k: [250, 250, 0], ix: 1 },
                                    s: {
                                      a: 0,
                                      k: [153.22, -154.334, 100],
                                      ix: 6
                                    },
                                    sk: { a: 0, k: 0 },
                                    p: { a: 0, k: [1076, 610, 0], ix: 2 },
                                    r: { a: 0, k: 217.976, ix: 10 },
                                    sa: { a: 0, k: 0 },
                                    o: { a: 0, k: 100, ix: 11 }
                                  },
                                  ef: [],
                                  shapes: [
                                    {
                                      ty: "gr",
                                      bm: 0,
                                      cl: "",
                                      ln: "",
                                      hd: false,
                                      mn: "ADBE Vector Group",
                                      nm: "Group 1",
                                      ix: 1,
                                      cix: 2,
                                      np: 2,
                                      it: [
                                        {
                                          ty: "sh",
                                          bm: 0,
                                          cl: "",
                                          ln: "",
                                          hd: false,
                                          mn: "ADBE Vector Shape - Group",
                                          nm: "Path 1",
                                          ix: 1,
                                          d: 1,
                                          ks: {
                                            a: 0,
                                            k: {
                                              c: false,
                                              i: [
                                                [0, 0],
                                                [0, 97.092],
                                                [49.706, 0],
                                                [12.516, -34.657],
                                                [0, 0],
                                                [-17.316, 2.433],
                                                [7.524, 11.837],
                                                [35.691, 0],
                                                [0, -49.703],
                                                [0, 0]
                                              ],
                                              o: [
                                                [48.325, -31.215],
                                                [0, -49.703],
                                                [-38.968, 0],
                                                [0, 0],
                                                [-20.118, 20.617],
                                                [22.473, -3.158],
                                                [-14.548, -30.117],
                                                [-49.7, 0],
                                                [0, 127.53],
                                                [0, 0]
                                              ],
                                              v: [
                                                [25.096, 140.103],
                                                [174.656, -65.181],
                                                [84.662, -155.177],
                                                [-0.004, -95.747],
                                                [-0.75, -99.637],
                                                [-0.004, -56.702],
                                                [-3.595, -104.284],
                                                [-84.663, -155.177],
                                                [-174.657, -65.181],
                                                [-0.004, 155.177]
                                              ]
                                            },
                                            ix: 2
                                          }
                                        },
                                        {
                                          ty: "st",
                                          bm: 0,
                                          cl: "",
                                          ln: "",
                                          hd: false,
                                          mn: "ADBE Vector Graphic - Stroke",
                                          nm: "Stroke 1",
                                          lc: 2,
                                          lj: 2,
                                          ml: 1,
                                          o: { a: 0, k: 100, ix: 4 },
                                          w: { a: 0, k: 5, ix: 5 },
                                          d: [],
                                          c: {
                                            a: 0,
                                            k: [0.6745, 0.6, 0.1804],
                                            ix: 3
                                          }
                                        },
                                        {
                                          ty: "tr",
                                          a: { a: 0, k: [0, 0], ix: 1 },
                                          s: { a: 0, k: [100, 100], ix: 3 },
                                          sk: { a: 0, k: 0, ix: 4 },
                                          p: {
                                            a: 0,
                                            k: [250.25, 242.178],
                                            ix: 2
                                          },
                                          r: { a: 0, k: 0, ix: 6 },
                                          sa: { a: 0, k: 0, ix: 5 },
                                          o: { a: 0, k: 100, ix: 7 }
                                        }
                                      ]
                                    },
                                    {
                                      ty: "tm",
                                      bm: 0,
                                      cl: "",
                                      ln: "",
                                      hd: false,
                                      mn: "ADBE Vector Filter - Trim",
                                      nm: "Trim Paths 1",
                                      ix: 2,
                                      e: { a: 0, k: 100, ix: 2 },
                                      o: { a: 0, k: 0, ix: 3 },
                                      s: {
                                        a: 1,
                                        k: [
                                          {
                                            o: { x: 0.167, y: 0.167 },
                                            i: { x: 0.833, y: 0.833 },
                                            s: [100],
                                            t: 0
                                          },
                                          {
                                            o: { x: 0.167, y: 0.167 },
                                            i: { x: 0.833, y: 0.833 },
                                            s: [0],
                                            t: 120.0000048877
                                          }
                                        ],
                                        ix: 1
                                      },
                                      m: 1
                                    }
                                  ],
                                  ind: 1
                                },
                                {
                                  ty: 4,
                                  nm: "\u00e5\u009c\u0096\u00e5\u00b1\u00a4 1/heartballoon Outlines",
                                  mn: "",
                                  sr: 1,
                                  st: 0,
                                  op: 900.000036657751,
                                  ip: 0,
                                  hd: false,
                                  cl: "",
                                  ln: "",
                                  ddd: 0,
                                  bm: 0,
                                  hasMask: false,
                                  ao: 0,
                                  ks: {
                                    a: { a: 0, k: [159, 144, 0], ix: 1 },
                                    s: { a: 0, k: [47.17, 44.444, 100], ix: 6 },
                                    sk: { a: 0, k: 0 },
                                    p: {
                                      a: 1,
                                      k: [
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [1672, 1314, 0],
                                          t: 0,
                                          ti: [38, 100.833, 0],
                                          to: [0, -72.833, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [1672, 877, 0],
                                          t: 31,
                                          ti: [9.667, 61.333, 0],
                                          to: [-38, -100.833, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [1444, 709, 0],
                                          t: 51,
                                          ti: [-67.667, 136.333, 0],
                                          to: [-9.667, -61.333, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [1614, 509, 0],
                                          t: 75,
                                          ti: [-39.333, 103, 0],
                                          to: [67.667, -136.333, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [1850, -109, 0],
                                          t: 120.0000048877
                                        }
                                      ],
                                      ix: 2
                                    },
                                    r: {
                                      a: 1,
                                      k: [
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [0],
                                          t: 0
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [-57.254],
                                          t: 51
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [49.501],
                                          t: 60
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [30.99],
                                          t: 75
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [22.068],
                                          t: 121.000004928431
                                        }
                                      ],
                                      ix: 10
                                    },
                                    sa: { a: 0, k: 0 },
                                    o: { a: 0, k: 100, ix: 11 }
                                  },
                                  ef: [],
                                  shapes: [
                                    {
                                      ty: "gr",
                                      bm: 0,
                                      cl: "",
                                      ln: "",
                                      hd: false,
                                      mn: "ADBE Vector Group",
                                      nm: "Group 1",
                                      ix: 1,
                                      cix: 2,
                                      np: 2,
                                      it: [
                                        {
                                          ty: "sh",
                                          bm: 0,
                                          cl: "",
                                          ln: "",
                                          hd: false,
                                          mn: "ADBE Vector Shape - Group",
                                          nm: "Path 1",
                                          ix: 1,
                                          d: 1,
                                          ks: {
                                            a: 0,
                                            k: {
                                              c: true,
                                              i: [
                                                [1.407, -7.146],
                                                [7.146, 1.408],
                                                [-1.407, 7.146],
                                                [-7.146, -1.408]
                                              ],
                                              o: [
                                                [-1.408, 7.147],
                                                [-7.148, -1.407],
                                                [1.407, -7.147],
                                                [7.148, 1.407]
                                              ],
                                              v: [
                                                [12.941, 2.548],
                                                [-2.547, 12.94],
                                                [-12.94, -2.548],
                                                [2.548, -12.94]
                                              ]
                                            },
                                            ix: 2
                                          }
                                        },
                                        {
                                          ty: "fl",
                                          bm: 0,
                                          cl: "",
                                          ln: "",
                                          hd: false,
                                          mn: "ADBE Vector Graphic - Fill",
                                          nm: "Fill 1",
                                          c: {
                                            a: 0,
                                            k: [0.6745, 0.6, 0.1804],
                                            ix: 4
                                          },
                                          r: 1,
                                          o: { a: 0, k: 100, ix: 5 }
                                        },
                                        {
                                          ty: "tr",
                                          a: { a: 0, k: [0, 0], ix: 1 },
                                          s: { a: 0, k: [100, 100], ix: 3 },
                                          sk: { a: 0, k: 0, ix: 4 },
                                          p: {
                                            a: 0,
                                            k: [270.922, 120.561],
                                            ix: 2
                                          },
                                          r: { a: 0, k: 0, ix: 6 },
                                          sa: { a: 0, k: 0, ix: 5 },
                                          o: { a: 0, k: 100, ix: 7 }
                                        }
                                      ]
                                    },
                                    {
                                      ty: "gr",
                                      bm: 0,
                                      cl: "",
                                      ln: "",
                                      hd: false,
                                      mn: "ADBE Vector Group",
                                      nm: "Group 2",
                                      ix: 2,
                                      cix: 2,
                                      np: 2,
                                      it: [
                                        {
                                          ty: "sh",
                                          bm: 0,
                                          cl: "",
                                          ln: "",
                                          hd: false,
                                          mn: "ADBE Vector Shape - Group",
                                          nm: "Path 1",
                                          ix: 1,
                                          d: 1,
                                          ks: {
                                            a: 0,
                                            k: {
                                              c: true,
                                              i: [
                                                [-21.52, -18.837],
                                                [22.352, 4.881],
                                                [19.235, 17.415],
                                                [3.96, 15.459]
                                              ],
                                              o: [
                                                [21.309, 18.652],
                                                [-21.11, -4.608],
                                                [-19.234, -17.413],
                                                [-6.439, -25.134]
                                              ],
                                              v: [
                                                [23.574, -24.7],
                                                [26.87, 41.658],
                                                [4.768, -3.928],
                                                [-42.783, -21.404]
                                              ]
                                            },
                                            ix: 2
                                          }
                                        },
                                        {
                                          ty: "fl",
                                          bm: 0,
                                          cl: "",
                                          ln: "",
                                          hd: false,
                                          mn: "ADBE Vector Graphic - Fill",
                                          nm: "Fill 1",
                                          c: {
                                            a: 0,
                                            k: [0.6745, 0.6, 0.1804],
                                            ix: 4
                                          },
                                          r: 1,
                                          o: { a: 0, k: 100, ix: 5 }
                                        },
                                        {
                                          ty: "tr",
                                          a: { a: 0, k: [0, 0], ix: 1 },
                                          s: { a: 0, k: [100, 100], ix: 3 },
                                          sk: { a: 0, k: 0, ix: 4 },
                                          p: {
                                            a: 0,
                                            k: [252.801, 59.847],
                                            ix: 2
                                          },
                                          r: { a: 0, k: 0, ix: 6 },
                                          sa: { a: 0, k: 0, ix: 5 },
                                          o: { a: 0, k: 100, ix: 7 }
                                        }
                                      ]
                                    },
                                    {
                                      ty: "gr",
                                      bm: 0,
                                      cl: "",
                                      ln: "",
                                      hd: false,
                                      mn: "ADBE Vector Group",
                                      nm: "Group 3",
                                      ix: 3,
                                      cix: 2,
                                      np: 2,
                                      it: [
                                        {
                                          ty: "sh",
                                          bm: 0,
                                          cl: "",
                                          ln: "",
                                          hd: false,
                                          mn: "ADBE Vector Shape - Group",
                                          nm: "Path 1",
                                          ix: 1,
                                          d: 1,
                                          ks: {
                                            a: 0,
                                            k: {
                                              c: true,
                                              i: [
                                                [4.045, 0],
                                                [0, 0],
                                                [0, 4.045],
                                                [-4.045, 0],
                                                [0, 0],
                                                [0, -4.044]
                                              ],
                                              o: [
                                                [0, 0],
                                                [-4.045, 0],
                                                [0, -4.044],
                                                [0, 0],
                                                [4.045, 0],
                                                [0, 4.045]
                                              ],
                                              v: [
                                                [11.74, 7.323],
                                                [-11.74, 7.323],
                                                [-19.063, 0],
                                                [-11.74, -7.323],
                                                [11.74, -7.323],
                                                [19.063, 0]
                                              ]
                                            },
                                            ix: 2
                                          }
                                        },
                                        {
                                          ty: "fl",
                                          bm: 0,
                                          cl: "",
                                          ln: "",
                                          hd: false,
                                          mn: "ADBE Vector Graphic - Fill",
                                          nm: "Fill 1",
                                          c: {
                                            a: 0,
                                            k: [0.6745, 0.6, 0.1804],
                                            ix: 4
                                          },
                                          r: 1,
                                          o: { a: 0, k: 100, ix: 5 }
                                        },
                                        {
                                          ty: "tr",
                                          a: { a: 0, k: [0, 0], ix: 1 },
                                          s: { a: 0, k: [100, 100], ix: 3 },
                                          sk: { a: 0, k: 0, ix: 4 },
                                          p: {
                                            a: 0,
                                            k: [158.597, 279.995],
                                            ix: 2
                                          },
                                          r: { a: 0, k: 0, ix: 6 },
                                          sa: { a: 0, k: 0, ix: 5 },
                                          o: { a: 0, k: 100, ix: 7 }
                                        }
                                      ]
                                    },
                                    {
                                      ty: "gr",
                                      bm: 0,
                                      cl: "",
                                      ln: "",
                                      hd: false,
                                      mn: "ADBE Vector Group",
                                      nm: "Group 4",
                                      ix: 4,
                                      cix: 2,
                                      np: 2,
                                      it: [
                                        {
                                          ty: "sh",
                                          bm: 0,
                                          cl: "",
                                          ln: "",
                                          hd: false,
                                          mn: "ADBE Vector Shape - Group",
                                          nm: "Path 1",
                                          ix: 1,
                                          d: 1,
                                          ks: {
                                            a: 0,
                                            k: {
                                              c: true,
                                              i: [
                                                [48.352, 0],
                                                [15.918, -21.855],
                                                [29.107, 0],
                                                [0, -48.352],
                                                [0, 0],
                                                [0, 73.567]
                                              ],
                                              o: [
                                                [-29.107, 0],
                                                [-15.918, -21.855],
                                                [-48.352, 0],
                                                [0, 73.567],
                                                [0, 0],
                                                [0, -48.352]
                                              ],
                                              v: [
                                                [70.799, -139.872],
                                                [-0.001, -103.801],
                                                [-70.8, -139.872],
                                                [-158.348, -52.323],
                                                [-0.001, 139.872],
                                                [158.348, -52.323]
                                              ]
                                            },
                                            ix: 2
                                          }
                                        },
                                        {
                                          ty: "fl",
                                          bm: 0,
                                          cl: "",
                                          ln: "",
                                          hd: false,
                                          mn: "ADBE Vector Graphic - Fill",
                                          nm: "Fill 1",
                                          c: {
                                            a: 0,
                                            k: [0.6745, 0.6, 0.1804],
                                            ix: 4
                                          },
                                          r: 1,
                                          o: { a: 0, k: 100, ix: 5 }
                                        },
                                        {
                                          ty: "tr",
                                          a: { a: 0, k: [0, 0], ix: 1 },
                                          s: { a: 0, k: [100, 100], ix: 3 },
                                          sk: { a: 0, k: 0, ix: 4 },
                                          p: {
                                            a: 0,
                                            k: [158.598, 140.122],
                                            ix: 2
                                          },
                                          r: { a: 0, k: 0, ix: 6 },
                                          sa: { a: 0, k: 0, ix: 5 },
                                          o: { a: 0, k: 100, ix: 7 }
                                        }
                                      ]
                                    }
                                  ],
                                  ind: 2
                                },
                                {
                                  ty: 4,
                                  nm: "\u00e5\u009c\u0096\u00e5\u00b1\u00a4 1/heartballoon Outlines",
                                  mn: "",
                                  sr: 1,
                                  st: 0,
                                  op: 900.000036657751,
                                  ip: 0,
                                  hd: false,
                                  cl: "",
                                  ln: "",
                                  ddd: 0,
                                  bm: 0,
                                  hasMask: false,
                                  ao: 0,
                                  ks: {
                                    a: { a: 0, k: [159, 144, 0], ix: 1 },
                                    s: { a: 0, k: [47.17, 44.444, 100], ix: 6 },
                                    sk: { a: 0, k: 0 },
                                    p: {
                                      a: 1,
                                      k: [
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [164, 1190, 0],
                                          t: 25,
                                          ti: [-40.667, 64.667, 0],
                                          to: [52.667, -48, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [480, 902, 0],
                                          t: 46,
                                          ti: [36.667, 41.667, 0],
                                          to: [40.667, -64.667, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [408, 802, 0],
                                          t: 64,
                                          ti: [12, 49.333, 0],
                                          to: [-36.667, -41.667, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [260, 652, 0],
                                          t: 86,
                                          ti: [-21.667, 31.333, 0],
                                          to: [-12, -49.333, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [336, 505.99999999999994, 0],
                                          t: 92,
                                          ti: [-8.667, 98.667, 0],
                                          to: [21.667, -31.333, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [390, 463.99999999999994, 0],
                                          t: 110,
                                          ti: [0.333, 91.667, 0],
                                          to: [8.667, -98.667, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [388, -86, 0],
                                          t: 143.000005824509
                                        }
                                      ],
                                      ix: 2
                                    },
                                    r: {
                                      a: 1,
                                      k: [
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [0],
                                          t: 25
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [42.423],
                                          t: 46
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [-50.068],
                                          t: 64
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [30.745],
                                          t: 92
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [-6.172],
                                          t: 110.000004480392
                                        }
                                      ],
                                      ix: 10
                                    },
                                    sa: { a: 0, k: 0 },
                                    o: { a: 0, k: 100, ix: 11 }
                                  },
                                  ef: [],
                                  shapes: [
                                    {
                                      ty: "gr",
                                      bm: 0,
                                      cl: "",
                                      ln: "",
                                      hd: false,
                                      mn: "ADBE Vector Group",
                                      nm: "Group 1",
                                      ix: 1,
                                      cix: 2,
                                      np: 2,
                                      it: [
                                        {
                                          ty: "sh",
                                          bm: 0,
                                          cl: "",
                                          ln: "",
                                          hd: false,
                                          mn: "ADBE Vector Shape - Group",
                                          nm: "Path 1",
                                          ix: 1,
                                          d: 1,
                                          ks: {
                                            a: 0,
                                            k: {
                                              c: true,
                                              i: [
                                                [1.407, -7.146],
                                                [7.146, 1.408],
                                                [-1.407, 7.146],
                                                [-7.146, -1.408]
                                              ],
                                              o: [
                                                [-1.408, 7.147],
                                                [-7.148, -1.407],
                                                [1.407, -7.147],
                                                [7.148, 1.407]
                                              ],
                                              v: [
                                                [12.941, 2.548],
                                                [-2.547, 12.94],
                                                [-12.94, -2.548],
                                                [2.548, -12.94]
                                              ]
                                            },
                                            ix: 2
                                          }
                                        },
                                        {
                                          ty: "fl",
                                          bm: 0,
                                          cl: "",
                                          ln: "",
                                          hd: false,
                                          mn: "ADBE Vector Graphic - Fill",
                                          nm: "Fill 1",
                                          c: {
                                            a: 0,
                                            k: [0.6745, 0.6, 0.1804],
                                            ix: 4
                                          },
                                          r: 1,
                                          o: { a: 0, k: 100, ix: 5 }
                                        },
                                        {
                                          ty: "tr",
                                          a: { a: 0, k: [0, 0], ix: 1 },
                                          s: { a: 0, k: [100, 100], ix: 3 },
                                          sk: { a: 0, k: 0, ix: 4 },
                                          p: {
                                            a: 0,
                                            k: [270.922, 120.561],
                                            ix: 2
                                          },
                                          r: { a: 0, k: 0, ix: 6 },
                                          sa: { a: 0, k: 0, ix: 5 },
                                          o: { a: 0, k: 100, ix: 7 }
                                        }
                                      ]
                                    },
                                    {
                                      ty: "gr",
                                      bm: 0,
                                      cl: "",
                                      ln: "",
                                      hd: false,
                                      mn: "ADBE Vector Group",
                                      nm: "Group 2",
                                      ix: 2,
                                      cix: 2,
                                      np: 2,
                                      it: [
                                        {
                                          ty: "sh",
                                          bm: 0,
                                          cl: "",
                                          ln: "",
                                          hd: false,
                                          mn: "ADBE Vector Shape - Group",
                                          nm: "Path 1",
                                          ix: 1,
                                          d: 1,
                                          ks: {
                                            a: 0,
                                            k: {
                                              c: true,
                                              i: [
                                                [-21.52, -18.837],
                                                [22.352, 4.881],
                                                [19.235, 17.415],
                                                [3.96, 15.459]
                                              ],
                                              o: [
                                                [21.309, 18.652],
                                                [-21.11, -4.608],
                                                [-19.234, -17.413],
                                                [-6.439, -25.134]
                                              ],
                                              v: [
                                                [23.574, -24.7],
                                                [26.87, 41.658],
                                                [4.768, -3.928],
                                                [-42.783, -21.404]
                                              ]
                                            },
                                            ix: 2
                                          }
                                        },
                                        {
                                          ty: "fl",
                                          bm: 0,
                                          cl: "",
                                          ln: "",
                                          hd: false,
                                          mn: "ADBE Vector Graphic - Fill",
                                          nm: "Fill 1",
                                          c: {
                                            a: 0,
                                            k: [0.6745, 0.6, 0.1804],
                                            ix: 4
                                          },
                                          r: 1,
                                          o: { a: 0, k: 100, ix: 5 }
                                        },
                                        {
                                          ty: "tr",
                                          a: { a: 0, k: [0, 0], ix: 1 },
                                          s: { a: 0, k: [100, 100], ix: 3 },
                                          sk: { a: 0, k: 0, ix: 4 },
                                          p: {
                                            a: 0,
                                            k: [252.801, 59.847],
                                            ix: 2
                                          },
                                          r: { a: 0, k: 0, ix: 6 },
                                          sa: { a: 0, k: 0, ix: 5 },
                                          o: { a: 0, k: 100, ix: 7 }
                                        }
                                      ]
                                    },
                                    {
                                      ty: "gr",
                                      bm: 0,
                                      cl: "",
                                      ln: "",
                                      hd: false,
                                      mn: "ADBE Vector Group",
                                      nm: "Group 3",
                                      ix: 3,
                                      cix: 2,
                                      np: 2,
                                      it: [
                                        {
                                          ty: "sh",
                                          bm: 0,
                                          cl: "",
                                          ln: "",
                                          hd: false,
                                          mn: "ADBE Vector Shape - Group",
                                          nm: "Path 1",
                                          ix: 1,
                                          d: 1,
                                          ks: {
                                            a: 0,
                                            k: {
                                              c: true,
                                              i: [
                                                [4.045, 0],
                                                [0, 0],
                                                [0, 4.045],
                                                [-4.045, 0],
                                                [0, 0],
                                                [0, -4.044]
                                              ],
                                              o: [
                                                [0, 0],
                                                [-4.045, 0],
                                                [0, -4.044],
                                                [0, 0],
                                                [4.045, 0],
                                                [0, 4.045]
                                              ],
                                              v: [
                                                [11.74, 7.323],
                                                [-11.74, 7.323],
                                                [-19.063, 0],
                                                [-11.74, -7.323],
                                                [11.74, -7.323],
                                                [19.063, 0]
                                              ]
                                            },
                                            ix: 2
                                          }
                                        },
                                        {
                                          ty: "fl",
                                          bm: 0,
                                          cl: "",
                                          ln: "",
                                          hd: false,
                                          mn: "ADBE Vector Graphic - Fill",
                                          nm: "Fill 1",
                                          c: {
                                            a: 0,
                                            k: [0.6745, 0.6, 0.1804],
                                            ix: 4
                                          },
                                          r: 1,
                                          o: { a: 0, k: 100, ix: 5 }
                                        },
                                        {
                                          ty: "tr",
                                          a: { a: 0, k: [0, 0], ix: 1 },
                                          s: { a: 0, k: [100, 100], ix: 3 },
                                          sk: { a: 0, k: 0, ix: 4 },
                                          p: {
                                            a: 0,
                                            k: [158.597, 279.995],
                                            ix: 2
                                          },
                                          r: { a: 0, k: 0, ix: 6 },
                                          sa: { a: 0, k: 0, ix: 5 },
                                          o: { a: 0, k: 100, ix: 7 }
                                        }
                                      ]
                                    },
                                    {
                                      ty: "gr",
                                      bm: 0,
                                      cl: "",
                                      ln: "",
                                      hd: false,
                                      mn: "ADBE Vector Group",
                                      nm: "Group 4",
                                      ix: 4,
                                      cix: 2,
                                      np: 2,
                                      it: [
                                        {
                                          ty: "sh",
                                          bm: 0,
                                          cl: "",
                                          ln: "",
                                          hd: false,
                                          mn: "ADBE Vector Shape - Group",
                                          nm: "Path 1",
                                          ix: 1,
                                          d: 1,
                                          ks: {
                                            a: 0,
                                            k: {
                                              c: true,
                                              i: [
                                                [48.352, 0],
                                                [15.918, -21.855],
                                                [29.107, 0],
                                                [0, -48.352],
                                                [0, 0],
                                                [0, 73.567]
                                              ],
                                              o: [
                                                [-29.107, 0],
                                                [-15.918, -21.855],
                                                [-48.352, 0],
                                                [0, 73.567],
                                                [0, 0],
                                                [0, -48.352]
                                              ],
                                              v: [
                                                [70.799, -139.872],
                                                [-0.001, -103.801],
                                                [-70.8, -139.872],
                                                [-158.348, -52.323],
                                                [-0.001, 139.872],
                                                [158.348, -52.323]
                                              ]
                                            },
                                            ix: 2
                                          }
                                        },
                                        {
                                          ty: "fl",
                                          bm: 0,
                                          cl: "",
                                          ln: "",
                                          hd: false,
                                          mn: "ADBE Vector Graphic - Fill",
                                          nm: "Fill 1",
                                          c: {
                                            a: 0,
                                            k: [0.6745, 0.6, 0.1804],
                                            ix: 4
                                          },
                                          r: 1,
                                          o: { a: 0, k: 100, ix: 5 }
                                        },
                                        {
                                          ty: "tr",
                                          a: { a: 0, k: [0, 0], ix: 1 },
                                          s: { a: 0, k: [100, 100], ix: 3 },
                                          sk: { a: 0, k: 0, ix: 4 },
                                          p: {
                                            a: 0,
                                            k: [158.598, 140.122],
                                            ix: 2
                                          },
                                          r: { a: 0, k: 0, ix: 6 },
                                          sa: { a: 0, k: 0, ix: 5 },
                                          o: { a: 0, k: 100, ix: 7 }
                                        }
                                      ]
                                    },
                                    {
                                      ty: "tm",
                                      bm: 0,
                                      cl: "",
                                      ln: "",
                                      hd: false,
                                      mn: "ADBE Vector Filter - Trim",
                                      nm: "Trim Paths 1",
                                      ix: 5,
                                      e: { a: 0, k: 100, ix: 2 },
                                      o: { a: 0, k: 0, ix: 3 },
                                      s: {
                                        a: 1,
                                        k: [
                                          {
                                            o: { x: 0.167, y: 0.167 },
                                            i: { x: 0.833, y: 0.833 },
                                            s: [0],
                                            t: 54
                                          },
                                          {
                                            o: { x: 0.167, y: 0.167 },
                                            i: { x: 0.833, y: 0.833 },
                                            s: [0],
                                            t: 123.000005009893
                                          }
                                        ],
                                        ix: 1
                                      },
                                      m: 1
                                    }
                                  ],
                                  ind: 3
                                },
                                {
                                  ty: 4,
                                  nm: "heart Outlines",
                                  mn: "",
                                  sr: 1,
                                  st: 0,
                                  op: 900.000036657751,
                                  ip: 0,
                                  hd: false,
                                  cl: "",
                                  ln: "",
                                  ddd: 0,
                                  bm: 0,
                                  hasMask: true,
                                  ao: 0,
                                  ks: {
                                    a: { a: 0, k: [250, 250, 0], ix: 1 },
                                    s: {
                                      a: 1,
                                      k: [
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [36.8, 36.8, 100],
                                          t: 111
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [172.322, 172.322, 100],
                                          t: 125.000005091354
                                        }
                                      ],
                                      ix: 6
                                    },
                                    sk: { a: 0, k: 0 },
                                    p: {
                                      a: 1,
                                      k: [
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [-176, 324, 0],
                                          t: 0,
                                          ti: [-290.667, 33, 0],
                                          to: [180.667, 98.667, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [908, 916, 0],
                                          t: 10,
                                          ti: [-119.287, 159.889, 0],
                                          to: [128.303, -14.567, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [1391.533, 663.875, 0],
                                          t: 22,
                                          ti: [-4.841, 40.032, 0],
                                          to: [150.953, -202.333, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [1504, 240, 0],
                                          t: 34,
                                          ti: [171.765, -119.931, 0],
                                          to: [5.467, -45.211, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [1139.094, 212.92300000000003, 0],
                                          t: 46,
                                          ti: [74.938, -6.399, 0],
                                          to: [-100.511, 70.179, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [960, 486.00000000000006, 0],
                                          t: 58,
                                          ti: [99.173, 53.406, 0],
                                          to: [-75.183, 6.42, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [729.531, 175.733, 0],
                                          t: 69,
                                          ti: [4.827, -45.124, 0],
                                          to: [-168.601, -90.795, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [348, 336, 0],
                                          t: 83,
                                          ti: [-135.016, -153.154, 0],
                                          to: [-3.954, 36.96, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [500.192, 666.997, 0],
                                          t: 97,
                                          ti: [-45.522, -55.369, 0],
                                          to: [126.784, 143.816, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [914, 916, 0],
                                          t: 110,
                                          ti: [2.667, 1, 0],
                                          to: [94, 114.333, 0]
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [762, 618, 0],
                                          t: 123.000005009893
                                        }
                                      ],
                                      ix: 2
                                    },
                                    r: {
                                      a: 1,
                                      k: [
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [0],
                                          t: 0
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [5400],
                                          t: 111
                                        },
                                        {
                                          o: { x: 0.167, y: 0.167 },
                                          i: { x: 0.833, y: 0.833 },
                                          s: [5366.331],
                                          t: 126.000005132085
                                        }
                                      ],
                                      ix: 10
                                    },
                                    sa: { a: 0, k: 0 },
                                    o: { a: 0, k: 100, ix: 11 }
                                  },
                                  ef: [],
                                  masksProperties: [
                                    {
                                      nm: "Mask 1",
                                      mn: "",
                                      inv: false,
                                      mode: "n",
                                      x: { a: 0, k: 0, ix: 4 },
                                      o: { a: 0, k: 100, ix: 3 },
                                      pt: {
                                        a: 0,
                                        k: {
                                          c: false,
                                          i: [[0, 0]],
                                          o: [[0, 0]],
                                          v: [[-4.335, 0.93]]
                                        },
                                        ix: 1
                                      }
                                    }
                                  ],
                                  shapes: [
                                    {
                                      ty: "gr",
                                      bm: 0,
                                      cl: "",
                                      ln: "",
                                      hd: false,
                                      mn: "ADBE Vector Group",
                                      nm: "Group 1",
                                      ix: 1,
                                      cix: 2,
                                      np: 2,
                                      it: [
                                        {
                                          ty: "sh",
                                          bm: 0,
                                          cl: "",
                                          ln: "",
                                          hd: false,
                                          mn: "ADBE Vector Shape - Group",
                                          nm: "Path 1",
                                          ix: 1,
                                          d: 1,
                                          ks: {
                                            a: 0,
                                            k: {
                                              c: true,
                                              i: [
                                                [0.373, 0],
                                                [0.549, 2.872],
                                                [0.296, 0.017],
                                                [-0.197, 3.307],
                                                [-3.297, -0.209],
                                                [-6.394, -33.475],
                                                [3.252, -0.621]
                                              ],
                                              o: [
                                                [-2.819, 0],
                                                [-6.262, -32.775],
                                                [-3.305, -0.198],
                                                [0.197, -3.308],
                                                [13.429, 0.8],
                                                [0.623, 3.251],
                                                [-0.381, 0.073]
                                              ],
                                              v: [
                                                [20.516, 25.982],
                                                [14.634, 21.11],
                                                [-21.21, -13.801],
                                                [-26.838, -20.144],
                                                [-20.496, -25.773],
                                                [26.412, 18.86],
                                                [21.649, 25.874]
                                              ]
                                            },
                                            ix: 2
                                          }
                                        },
                                        {
                                          ty: "fl",
                                          bm: 0,
                                          cl: "",
                                          ln: "",
                                          hd: false,
                                          mn: "ADBE Vector Graphic - Fill",
                                          nm: "Fill 1",
                                          c: { a: 0, k: [1, 1, 1], ix: 4 },
                                          r: 1,
                                          o: { a: 0, k: 100, ix: 5 }
                                        },
                                        {
                                          ty: "tr",
                                          a: { a: 0, k: [0, 0], ix: 1 },
                                          s: { a: 0, k: [100, 100], ix: 3 },
                                          sk: { a: 0, k: 0, ix: 4 },
                                          p: {
                                            a: 0,
                                            k: [374.584, 136.062],
                                            ix: 2
                                          },
                                          r: { a: 0, k: 0, ix: 6 },
                                          sa: { a: 0, k: 0, ix: 5 },
                                          o: { a: 0, k: 100, ix: 7 }
                                        }
                                      ]
                                    },
                                    {
                                      ty: "gr",
                                      bm: 0,
                                      cl: "",
                                      ln: "",
                                      hd: false,
                                      mn: "ADBE Vector Group",
                                      nm: "Group 2",
                                      ix: 2,
                                      cix: 2,
                                      np: 2,
                                      it: [
                                        {
                                          ty: "sh",
                                          bm: 0,
                                          cl: "",
                                          ln: "",
                                          hd: false,
                                          mn: "ADBE Vector Shape - Group",
                                          nm: "Path 1",
                                          ix: 1,
                                          d: 1,
                                          ks: {
                                            a: 0,
                                            k: {
                                              c: true,
                                              i: [
                                                [48.047, 0],
                                                [12.098, -33.499],
                                                [37.672, 0],
                                                [0, -48.044],
                                                [0, 0],
                                                [0, 123.274]
                                              ],
                                              o: [
                                                [-37.667, 0],
                                                [-12.093, -33.499],
                                                [-48.041, 0],
                                                [0, 123.274],
                                                [0, 0],
                                                [0, -48.044]
                                              ],
                                              v: [
                                                [81.837, -149.998],
                                                [-0.003, -92.552],
                                                [-81.836, -149.998],
                                                [-168.827, -63.006],
                                                [-0.003, 149.998],
                                                [168.826, -63.006]
                                              ]
                                            },
                                            ix: 2
                                          }
                                        },
                                        {
                                          ty: "fl",
                                          bm: 0,
                                          cl: "",
                                          ln: "",
                                          hd: false,
                                          mn: "ADBE Vector Graphic - Fill",
                                          nm: "Fill 1",
                                          c: {
                                            a: 0,
                                            k: [0.6745, 0.6, 0.1804],
                                            ix: 4
                                          },
                                          r: 1,
                                          o: { a: 0, k: 100, ix: 5 }
                                        },
                                        {
                                          ty: "tr",
                                          a: { a: 0, k: [0, 0], ix: 1 },
                                          s: { a: 0, k: [100, 100], ix: 3 },
                                          sk: { a: 0, k: 0, ix: 4 },
                                          p: {
                                            a: 0,
                                            k: [262.173, 232.462],
                                            ix: 2
                                          },
                                          r: { a: 0, k: 0, ix: 6 },
                                          sa: { a: 0, k: 0, ix: 5 },
                                          o: { a: 0, k: 100, ix: 7 }
                                        }
                                      ]
                                    }
                                  ],
                                  ind: 4
                                }
                              ],
                              ddd: 0,
                              h: 1080,
                              w: 1920,
                              meta: {
                                a: "",
                                k: "",
                                d: "",
                                g: "@lottiefiles/toolkit-js 0.22.1",
                                tc: "#000000"
                              },
                              v: "5.5.2",
                              fr: 30,
                              op: 180,
                              ip: 0,
                              assets: []
                            }}
                            className={classNames("__wab_instance", sty.lottie)}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__khIOh
                            )}
                          >
                            {"We'll confirm when your speeches are available!"}
                          </div>
                        </section>
                      )}
                    </DataCtxReader__>
                  }
                  method={"GET"}
                  noLayout={false}
                  previewSpinner={false}
                  url={`https://app.weddingspeechpro.io/version-test/api/1.1/wf/firstspeechcreator?formSubmission=?${$state.submissionValue}`}
                >
                  <DataCtxReader__>
                    {$ctx => (
                      <section
                        className={classNames(
                          projectcss.all,
                          sty.section__tghoN
                        )}
                      >
                        <section
                          data-plasmic-name={"verticalCta"}
                          data-plasmic-override={overrides.verticalCta}
                          className={classNames(
                            projectcss.all,
                            sty.verticalCta
                          )}
                        >
                          <section
                            className={classNames(
                              projectcss.all,
                              sty.section__iQclk
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2XCc2,
                                ``
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Speech 1"}
                                </span>
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uryGv,
                                "tease"
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.firstSpeechTruncated.response
                                      .truncatedSpeeched;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </section>
                          <section
                            className={classNames(
                              projectcss.all,
                              sty.section__sOM
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2Soz3
                              )}
                            >
                              {"Unlock Your Speeches"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__aszXn
                              )}
                            >
                              {
                                "We'll help you get the details to make your speech a success "
                              }
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__mNla
                              )}
                            >
                              {"$29.99"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kKouY
                              )}
                            >
                              {"One-Time Purchase - Lifetime Memory"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__obwmg
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      "Send My Speech to " +
                                      $state.form.value.userEmail
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return 'Send My Speech to "email@email.com"';
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__npmwQ
                              )}
                              link={(() => {
                                try {
                                  return (
                                    "https://buy.stripe.com/4gwfZn1qpaID9ag5kl" +
                                    "?client_reference_id=" +
                                    $ctx.firstSpeechTruncated.response.orderID
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return `/speech-wizard`;
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              {"Get Speech Now"}
                            </Button>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vd33J
                              )}
                            >
                              {"100% Money Back Guarantee"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__js5JZ
                              )}
                            >
                              {"What You Get:"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__bowyi
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__ptFag)}
                                displayHeight={"16px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"16px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/wedding_speech_pro/images/icons8Checkmarkgif.gif",
                                  fullWidth: 48,
                                  fullHeight: 1344,
                                  aspectRatio: undefined
                                }}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__nSBrb
                                )}
                              >
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {"3 Unique Speeches"}
                                  </span>
                                  <React.Fragment>
                                    {
                                      ". No recycled templates. Just quality, tailored speeches. "
                                    }
                                  </React.Fragment>
                                </React.Fragment>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__d8Bzr
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__xvqgm)}
                                displayHeight={"16px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"16px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/wedding_speech_pro/images/icons8Checkmarkgif.gif",
                                  fullWidth: 48,
                                  fullHeight: 1344,
                                  aspectRatio: undefined
                                }}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__pHRh
                                )}
                              >
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {"Peace of Mind. "}
                                  </span>
                                  <React.Fragment>
                                    {
                                      "You'll have 3 great speeches, in your hand, ready to go."
                                    }
                                  </React.Fragment>
                                </React.Fragment>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__cDu3O
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img___87Px7)}
                                displayHeight={"16px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"16px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/wedding_speech_pro/images/icons8Checkmarkgif.gif",
                                  fullWidth: 48,
                                  fullHeight: 1344,
                                  aspectRatio: undefined
                                }}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__jmrEk
                                )}
                              >
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {"100% Money Back Guarantee"}
                                  </span>
                                  <React.Fragment>
                                    {
                                      ". We deliver top quality speeches, or your money back"
                                    }
                                  </React.Fragment>
                                </React.Fragment>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__beLpQ
                              )}
                            >
                              {"See Refund Policy for Details"}
                            </div>
                            <section
                              className={classNames(
                                projectcss.all,
                                sty.section__hUXb9
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.columns___0ThVu
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column__gUMw0
                                  )}
                                >
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__pmSpP)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"40px"}
                                    loading={"lazy"}
                                    src={{
                                      src: "/plasmic/wedding_speech_pro/images/image14.svg",
                                      fullWidth: 234,
                                      fullHeight: 150,
                                      aspectRatio: 1.56
                                    }}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column___1Gvhj
                                  )}
                                >
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__f5Ter)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"40px"}
                                    loading={"lazy"}
                                    src={{
                                      src: "/plasmic/wedding_speech_pro/images/image15.svg",
                                      fullWidth: 234,
                                      fullHeight: 150,
                                      aspectRatio: 1.56
                                    }}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column__sbJf4
                                  )}
                                >
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__phBkF)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"40px"}
                                    loading={"lazy"}
                                    src={{
                                      src: "/plasmic/wedding_speech_pro/images/image12.svg",
                                      fullWidth: 234,
                                      fullHeight: 150,
                                      aspectRatio: 1.56
                                    }}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column__mWj56
                                  )}
                                >
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__onkPo)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"40px"}
                                    loading={"lazy"}
                                    src={{
                                      src: "/plasmic/wedding_speech_pro/images/image13.svg",
                                      fullWidth: 234,
                                      fullHeight: 150,
                                      aspectRatio: 1.56
                                    }}
                                  />
                                </div>
                              </div>
                            </section>
                          </section>
                        </section>
                      </section>
                    )}
                  </DataCtxReader__>
                </DataFetcher>
              ) : null}
            </section>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "globalHeader2",
    "steps",
    "form",
    "input",
    "input2",
    "input3",
    "select",
    "input4",
    "input5",
    "input6",
    "input7",
    "textArea",
    "input8",
    "textArea2",
    "firstNameInput",
    "inputFirstName",
    "emailInput",
    "inputEmail",
    "speechApi",
    "lottie",
    "verticalCta"
  ],
  globalHeader2: ["globalHeader2"],
  steps: ["steps"],
  form: [
    "form",
    "input",
    "input2",
    "input3",
    "select",
    "input4",
    "input5",
    "input6",
    "input7",
    "textArea",
    "input8",
    "textArea2"
  ],
  input: ["input"],
  input2: ["input2"],
  input3: ["input3"],
  select: ["select"],
  input4: ["input4"],
  input5: ["input5"],
  input6: ["input6"],
  input7: ["input7"],
  textArea: ["textArea"],
  input8: ["input8"],
  textArea2: ["textArea2"],
  firstNameInput: ["firstNameInput", "inputFirstName"],
  inputFirstName: ["inputFirstName"],
  emailInput: ["emailInput", "inputEmail"],
  inputEmail: ["inputEmail"],
  speechApi: ["speechApi", "lottie", "verticalCta"],
  lottie: ["lottie"],
  verticalCta: ["verticalCta"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  globalHeader2: typeof GlobalHeader2;
  steps: typeof AntdSteps;
  form: typeof FormWrapper;
  input: typeof AntdInput;
  input2: typeof AntdInput;
  input3: typeof AntdInput;
  select: typeof AntdSelect;
  input4: typeof AntdInput;
  input5: typeof AntdInput;
  input6: typeof AntdInput;
  input7: typeof AntdInput;
  textArea: typeof AntdTextArea;
  input8: typeof AntdInput;
  textArea2: typeof AntdTextArea;
  firstNameInput: typeof FormItemWrapper;
  inputFirstName: typeof AntdInput;
  emailInput: typeof FormItemWrapper;
  inputEmail: typeof AntdInput;
  speechApi: typeof DataFetcher;
  lottie: typeof LottieWrapper;
  verticalCta: "section";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFinalNewWizard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFinalNewWizard__VariantsArgs;
    args?: PlasmicFinalNewWizard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFinalNewWizard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFinalNewWizard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFinalNewWizard__ArgProps,
          internalVariantPropNames: PlasmicFinalNewWizard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFinalNewWizard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFinalNewWizard";
  } else {
    func.displayName = `PlasmicFinalNewWizard.${nodeName}`;
  }
  return func;
}

export const PlasmicFinalNewWizard = Object.assign(
  // Top-level PlasmicFinalNewWizard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    globalHeader2: makeNodeComponent("globalHeader2"),
    steps: makeNodeComponent("steps"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    input3: makeNodeComponent("input3"),
    select: makeNodeComponent("select"),
    input4: makeNodeComponent("input4"),
    input5: makeNodeComponent("input5"),
    input6: makeNodeComponent("input6"),
    input7: makeNodeComponent("input7"),
    textArea: makeNodeComponent("textArea"),
    input8: makeNodeComponent("input8"),
    textArea2: makeNodeComponent("textArea2"),
    firstNameInput: makeNodeComponent("firstNameInput"),
    inputFirstName: makeNodeComponent("inputFirstName"),
    emailInput: makeNodeComponent("emailInput"),
    inputEmail: makeNodeComponent("inputEmail"),
    speechApi: makeNodeComponent("speechApi"),
    lottie: makeNodeComponent("lottie"),
    verticalCta: makeNodeComponent("verticalCta"),

    // Metadata about props expected for PlasmicFinalNewWizard
    internalVariantProps: PlasmicFinalNewWizard__VariantProps,
    internalArgProps: PlasmicFinalNewWizard__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFinalNewWizard;
/* prettier-ignore-end */
