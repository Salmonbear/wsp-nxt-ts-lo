// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sj7u5T6A4j1Xdo61ZkYEWA
// Component: MHfIDNxytjjQ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import { PlasmicHead } from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: Dy4L9PNlqEQ/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sj7u5T6A4j1Xdo61ZkYEWA/projectcss
import sty from "./PlasmicArticleLayout.module.css"; // plasmic-import: MHfIDNxytjjQ/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: mDNbn1ZLKrHu/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 5HAw4RHFxpJq/icon

createPlasmicElementProxy;

export type PlasmicArticleLayout__VariantMembers = {};
export type PlasmicArticleLayout__VariantsArgs = {};
type VariantPropType = keyof PlasmicArticleLayout__VariantsArgs;
export const PlasmicArticleLayout__VariantProps = new Array<VariantPropType>();

export type PlasmicArticleLayout__ArgsType = {};
type ArgPropType = keyof PlasmicArticleLayout__ArgsType;
export const PlasmicArticleLayout__ArgProps = new Array<ArgPropType>();

export type PlasmicArticleLayout__OverridesType = {
  cmsBlogData?: Flex__<typeof CmsQueryRepeater>;
  pageMetadataOverride?: Flex__<typeof PlasmicHead>;
  hero?: Flex__<"section">;
  h1?: Flex__<"h1">;
  p?: Flex__<"p">;
  upsell?: Flex__<"section">;
  h3?: Flex__<"h3">;
  button?: Flex__<typeof Button>;
};

export interface DefaultArticleLayoutProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicArticleLayout__RenderFunc(props: {
  variants: PlasmicArticleLayout__VariantsArgs;
  args: PlasmicArticleLayout__ArgsType;
  overrides: PlasmicArticleLayout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <CmsQueryRepeater
      data-plasmic-name={"cmsBlogData"}
      data-plasmic-override={overrides.cmsBlogData}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.cmsBlogData
      )}
      desc={false}
      emptyMessage={
        <DataCtxReader__>
          {$ctx => (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kL6Xl
              )}
            >
              {"No matching published entries found."}
            </div>
          )}
        </DataCtxReader__>
      }
      filterField={"slug"}
      filterValue={(() => {
        try {
          return $ctx.params.parameters;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      forceEmptyState={false}
      forceLoadingState={false}
      limit={0}
      loadingMessage={
        <DataCtxReader__>
          {$ctx => (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eZaiI
              )}
            >
              {"Loading..."}
            </div>
          )}
        </DataCtxReader__>
      }
      noAutoRepeat={false}
      noLayout={false}
      table={"content"}
      useDraft={false}
    >
      <DataCtxReader__>
        {$ctx => (
          <React.Fragment>
            <PlasmicHead
              data-plasmic-name={"pageMetadataOverride"}
              data-plasmic-override={overrides.pageMetadataOverride}
              canonical={(() => {
                try {
                  return (
                    "https://weddingspeechpro.io/maid-of-honor-speech/" +
                    $ctx.params.parameters
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.pageMetadataOverride)}
              description={(() => {
                try {
                  return $ctx.plasmicCmsContentItem.data.metaDescription;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              image={"/plasmic/wedding_speech_pro/images/group19Png.png"}
              title={(() => {
                try {
                  return $ctx.plasmicCmsContentItem.data.metaTitle;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />

            <section
              data-plasmic-name={"hero"}
              data-plasmic-override={overrides.hero}
              className={classNames(projectcss.all, sty.hero)}
            >
              <section
                className={classNames(projectcss.all, sty.section__sjbW4)}
              >
                <div className={classNames(projectcss.all, sty.columns__jxPwH)}>
                  <div
                    className={classNames(projectcss.all, sty.column__kLjKz)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___4XbFb)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"277px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/wedding_speech_pro/images/dalle20231022140505GrainyPolaroidPictureOfAWeddingReceptionTableAChampagneFluteShimmeringInAnticipationIsPlacedAdjacentToASeatingCardDesignatedPng.png",
                        fullWidth: 1024,
                        fullHeight: 1024,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div className={classNames(projectcss.all, sty.column__sWOo)}>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__spQsE)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__e8Odi
                        )}
                      >
                        {"Wedding Speech Guides"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__we65V
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <h1
                              data-plasmic-name={"h1"}
                              data-plasmic-override={overrides.h1}
                              className={classNames(
                                projectcss.all,
                                projectcss.h1,
                                projectcss.__wab_text,
                                sty.h1
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.plasmicCmsContentItem.data
                                      .blogTitle;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </h1>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                </div>
              </section>
              <section
                className={classNames(projectcss.all, sty.section__rljzv)}
              >
                <p
                  data-plasmic-name={"p"}
                  data-plasmic-override={overrides.p}
                  className={classNames(
                    projectcss.all,
                    projectcss.p,
                    projectcss.__wab_text,
                    sty.p
                  )}
                >
                  <div
                    className={projectcss.__wab_expr_html_text}
                    dangerouslySetInnerHTML={{
                      __html: (() => {
                        try {
                          return (
                            "<P>" +
                            $ctx.plasmicCmsContentCollection[0].data.fullBody +
                            "</p>"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()
                    }}
                  />
                </p>
              </section>
              <section
                data-plasmic-name={"upsell"}
                data-plasmic-override={overrides.upsell}
                className={classNames(projectcss.all, sty.upsell)}
              >
                <div className={classNames(projectcss.all, sty.columns__sdDa1)}>
                  <div
                    className={classNames(projectcss.all, sty.column__hq6Vd)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__xBx4B)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"245px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/wedding_speech_pro/images/image4.png",
                        fullWidth: 864,
                        fullHeight: 918,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__mjNbF)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tZvbn)}
                    >
                      <h3
                        data-plasmic-name={"h3"}
                        data-plasmic-override={overrides.h3}
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3
                        )}
                      >
                        {"Stressed About Your Wedding Speech?"}
                      </h3>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fQst8
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "var(--token-RvPI6LyeIPmd)" }}
                          >
                            {"Relax! Unlock 3 Custom Speeches For Just "}
                          </span>
                          <React.Fragment>{""}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{
                              textDecorationLine: "line-through",
                              color: "#7A7A7AD9"
                            }}
                          >
                            {"$39"}
                          </span>
                          <React.Fragment>{""}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "var(--token-RvPI6LyeIPmd)" }}
                          >
                            {" $19."}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__anYc6
                        )}
                      >
                        {
                          "Why struggle for words when we've got you covered? No research required. You answer a few questions and we'll deliver speeches that you can be proud of, without the sleepless nights."
                        }
                      </div>
                      <Button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames("__wab_instance", sty.button)}
                        color={"yellow"}
                        link={`/speech-wizard`}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___8Luiy
                          )}
                        >
                          {"Get Your Speech Now"}
                        </div>
                      </Button>
                    </div>
                  </div>
                </div>
              </section>
            </section>
          </React.Fragment>
        )}
      </DataCtxReader__>
    </CmsQueryRepeater>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  cmsBlogData: [
    "cmsBlogData",
    "pageMetadataOverride",
    "hero",
    "h1",
    "p",
    "upsell",
    "h3",
    "button"
  ],
  pageMetadataOverride: ["pageMetadataOverride"],
  hero: ["hero", "h1", "p", "upsell", "h3", "button"],
  h1: ["h1"],
  p: ["p"],
  upsell: ["upsell", "h3", "button"],
  h3: ["h3"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  cmsBlogData: typeof CmsQueryRepeater;
  pageMetadataOverride: typeof PlasmicHead;
  hero: "section";
  h1: "h1";
  p: "p";
  upsell: "section";
  h3: "h3";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicArticleLayout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicArticleLayout__VariantsArgs;
    args?: PlasmicArticleLayout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicArticleLayout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicArticleLayout__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicArticleLayout__ArgProps,
          internalVariantPropNames: PlasmicArticleLayout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicArticleLayout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "cmsBlogData") {
    func.displayName = "PlasmicArticleLayout";
  } else {
    func.displayName = `PlasmicArticleLayout.${nodeName}`;
  }
  return func;
}

export const PlasmicArticleLayout = Object.assign(
  // Top-level PlasmicArticleLayout renders the root element
  makeNodeComponent("cmsBlogData"),
  {
    // Helper components rendering sub-elements
    pageMetadataOverride: makeNodeComponent("pageMetadataOverride"),
    hero: makeNodeComponent("hero"),
    h1: makeNodeComponent("h1"),
    p: makeNodeComponent("p"),
    upsell: makeNodeComponent("upsell"),
    h3: makeNodeComponent("h3"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicArticleLayout
    internalVariantProps: PlasmicArticleLayout__VariantProps,
    internalArgProps: PlasmicArticleLayout__ArgProps
  }
);

export default PlasmicArticleLayout;
/* prettier-ignore-end */
