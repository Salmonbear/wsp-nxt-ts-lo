// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sj7u5T6A4j1Xdo61ZkYEWA
// Component: TfjTDOey4vdq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import GlobalHeader2 from "../../GlobalHeader2"; // plasmic-import: DWQ8Kd-IAGYP/component
import ArticleLayout from "../../ArticleLayout"; // plasmic-import: MHfIDNxytjjQ/component
import GlobalFooter from "../../GlobalFooter"; // plasmic-import: wRdBAJMlIHx/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sj7u5T6A4j1Xdo61ZkYEWA/projectcss
import sty from "./Plasmic_4BestManSpeech.module.css"; // plasmic-import: TfjTDOey4vdq/css

createPlasmicElementProxy;

export type Plasmic_4BestManSpeech__VariantMembers = {};
export type Plasmic_4BestManSpeech__VariantsArgs = {};
type VariantPropType = keyof Plasmic_4BestManSpeech__VariantsArgs;
export const Plasmic_4BestManSpeech__VariantProps =
  new Array<VariantPropType>();

export type Plasmic_4BestManSpeech__ArgsType = {};
type ArgPropType = keyof Plasmic_4BestManSpeech__ArgsType;
export const Plasmic_4BestManSpeech__ArgProps = new Array<ArgPropType>();

export type Plasmic_4BestManSpeech__OverridesType = {
  root?: Flex__<"div">;
  globalHeader2?: Flex__<typeof GlobalHeader2>;
  articleLayout?: Flex__<typeof ArticleLayout>;
  section?: Flex__<"section">;
  globalFooter?: Flex__<typeof GlobalFooter>;
};

export interface Default_4BestManSpeechProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function Plasmic_4BestManSpeech__RenderFunc(props: {
  variants: Plasmic_4BestManSpeech__VariantsArgs;
  args: Plasmic_4BestManSpeech__ArgsType;
  overrides: Plasmic_4BestManSpeech__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{Plasmic_4BestManSpeech.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={Plasmic_4BestManSpeech.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={Plasmic_4BestManSpeech.pageMetadata.title}
        />

        <meta
          key="og:image"
          property="og:image"
          content={Plasmic_4BestManSpeech.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={Plasmic_4BestManSpeech.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <GlobalHeader2
            data-plasmic-name={"globalHeader2"}
            data-plasmic-override={overrides.globalHeader2}
            className={classNames("__wab_instance", sty.globalHeader2)}
          />

          <ArticleLayout
            data-plasmic-name={"articleLayout"}
            data-plasmic-override={overrides.articleLayout}
            className={classNames("__wab_instance", sty.articleLayout)}
          />

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <GlobalFooter
              data-plasmic-name={"globalFooter"}
              data-plasmic-override={overrides.globalFooter}
              className={classNames("__wab_instance", sty.globalFooter)}
            />
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "globalHeader2", "articleLayout", "section", "globalFooter"],
  globalHeader2: ["globalHeader2"],
  articleLayout: ["articleLayout"],
  section: ["section", "globalFooter"],
  globalFooter: ["globalFooter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  globalHeader2: typeof GlobalHeader2;
  articleLayout: typeof ArticleLayout;
  section: "section";
  globalFooter: typeof GlobalFooter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmic_4BestManSpeech__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmic_4BestManSpeech__VariantsArgs;
    args?: Plasmic_4BestManSpeech__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmic_4BestManSpeech__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      Plasmic_4BestManSpeech__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: Plasmic_4BestManSpeech__ArgProps,
          internalVariantPropNames: Plasmic_4BestManSpeech__VariantProps
        }),
      [props, nodeName]
    );
    return Plasmic_4BestManSpeech__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic_4BestManSpeech";
  } else {
    func.displayName = `Plasmic_4BestManSpeech.${nodeName}`;
  }
  return func;
}

export const Plasmic_4BestManSpeech = Object.assign(
  // Top-level Plasmic_4BestManSpeech renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    globalHeader2: makeNodeComponent("globalHeader2"),
    articleLayout: makeNodeComponent("articleLayout"),
    section: makeNodeComponent("section"),
    globalFooter: makeNodeComponent("globalFooter"),

    // Metadata about props expected for Plasmic_4BestManSpeech
    internalVariantProps: Plasmic_4BestManSpeech__VariantProps,
    internalArgProps: Plasmic_4BestManSpeech__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Inspiration for the best wedding speeches",
      description: "",
      ogImageSrc:
        "https://site-assets.plasmic.app/eb770fb69aaf7fb97e27c4975f86b18d.png",
      canonical: ""
    }
  }
);

export default Plasmic_4BestManSpeech;
/* prettier-ignore-end */
