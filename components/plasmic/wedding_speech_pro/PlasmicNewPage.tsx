// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sj7u5T6A4j1Xdo61ZkYEWA
// Component: jABQDl-OrqH1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import GlobalHeader2 from "../../GlobalHeader2"; // plasmic-import: DWQ8Kd-IAGYP/component
import { AntdSteps } from "@plasmicpkgs/antd5/skinny/registerSteps";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: Dy4L9PNlqEQ/component
import Steppaz from "../../Steppaz"; // plasmic-import: kjxIGF8quPxY/component

import { useScreenVariants as useScreenVariantszbPet7MzObh } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: zbPET7mzOBH/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sj7u5T6A4j1Xdo61ZkYEWA/projectcss
import sty from "./PlasmicNewPage.module.css"; // plasmic-import: jABQDl-OrqH1/css

import ChecksvgIcon from "../plasmic_tabs/icons/PlasmicIcon__Checksvg"; // plasmic-import: zq2s7N0xWucT/icon
import ChecksvgIcon2 from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: mDNbn1ZLKrHu/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 5HAw4RHFxpJq/icon

createPlasmicElementProxy;

export type PlasmicNewPage__VariantMembers = {};
export type PlasmicNewPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage__VariantsArgs;
export const PlasmicNewPage__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage__ArgsType;
export const PlasmicNewPage__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage__OverridesType = {
  root?: Flex__<"div">;
  globalHeader2?: Flex__<typeof GlobalHeader2>;
  steps2?: Flex__<typeof AntdSteps>;
  q1?: Flex__<"div">;
  firstNameInput?: Flex__<typeof FormItemWrapper>;
  inputFirstName?: Flex__<typeof AntdInput>;
  emailInput?: Flex__<typeof FormItemWrapper>;
  inputEmail?: Flex__<typeof AntdInput>;
  speechTypeInput?: Flex__<typeof FormItemWrapper>;
  inputSpeechType?: Flex__<typeof AntdInput>;
  inputRecipient?: Flex__<typeof AntdInput>;
  inputRecipientName?: Flex__<typeof AntdInput>;
  inputRecipient3Words?: Flex__<typeof AntdInput>;
  inputPartnerName?: Flex__<typeof AntdInput>;
  inputPartner3Wrods?: Flex__<typeof AntdInput>;
  inputKeyMessage?: Flex__<typeof AntdInput>;
  svg?: Flex__<"svg">;
  steps?: Flex__<typeof AntdSteps>;
  steppaz?: Flex__<typeof Steppaz>;
};

export interface DefaultNewPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewPage__RenderFunc(props: {
  variants: PlasmicNewPage__VariantsArgs;
  args: PlasmicNewPage__ArgsType;
  overrides: PlasmicNewPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "inputFirstName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputEmail.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputSpeechType.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputRecipient.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputRecipientName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputRecipient3Words.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputPartnerName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputKeyMessage.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputPartner3Wrods.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "steps2.current",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "steps.current",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "submissionValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszbPet7MzObh()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <GlobalHeader2
            data-plasmic-name={"globalHeader2"}
            data-plasmic-override={overrides.globalHeader2}
            className={classNames("__wab_instance", sty.globalHeader2)}
          />

          <section className={classNames(projectcss.all, sty.section__s6E2P)}>
            <AntdSteps
              data-plasmic-name={"steps2"}
              data-plasmic-override={overrides.steps2}
              className={classNames("__wab_instance", sty.steps2)}
              current={generateStateValueProp($state, ["steps2", "current"])}
              direction={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "horizontal"
                  : undefined
              }
              items={[{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]}
              onChange={generateStateOnChangeProp($state, [
                "steps2",
                "current"
              ])}
              progressDot={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? false
                  : undefined
              }
              responsive={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
              type={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "inline"
                  : undefined
              }
            />

            {(() => {
              try {
                return true;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                data-plasmic-name={"q1"}
                data-plasmic-override={overrides.q1}
                className={classNames(projectcss.all, sty.q1)}
                id={"1"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5OHFr
                  )}
                >
                  {"Right, lets start with your first name"}
                </div>
                <FormItemWrapper
                  data-plasmic-name={"firstNameInput"}
                  data-plasmic-override={overrides.firstNameInput}
                  className={classNames("__wab_instance", sty.firstNameInput)}
                  hidden={false}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__e6NGk
                      )}
                    >
                      {"Right, let's start with your first name"}
                    </div>
                  }
                  name={"firstName"}
                  noLabel={true}
                  noStyle={false}
                  rules={[{ ruleType: "required" }]}
                >
                  {(() => {
                    const child$Props = {
                      bordered: true,
                      className: classNames(
                        "__wab_instance",
                        sty.inputFirstName
                      ),
                      onChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["inputFirstName", "value"],
                        AntdInput_Helpers
                      ),
                      size: "large",
                      value: generateStateValueProp($state, [
                        "inputFirstName",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "inputFirstName.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"inputFirstName"}
                        data-plasmic-override={overrides.inputFirstName}
                        {...child$Props}
                      />
                    );
                  })()}
                </FormItemWrapper>
              </div>
            ) : null}
            <div
              className={classNames(projectcss.all, sty.freeBox__eke23)}
              id={"2"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rWhhc
                )}
              >
                {"Great, now what's your email address?"}
              </div>
              <FormItemWrapper
                data-plasmic-name={"emailInput"}
                data-plasmic-override={overrides.emailInput}
                className={classNames("__wab_instance", sty.emailInput)}
                hidden={false}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bS7Pa
                    )}
                  >
                    {"Right, let's start with your first name"}
                  </div>
                }
                name={"firstName"}
                noLabel={true}
                noStyle={false}
                rules={[{ ruleType: "required" }]}
              >
                {(() => {
                  const child$Props = {
                    bordered: true,
                    className: classNames("__wab_instance", sty.inputEmail),
                    onChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["inputEmail", "value"],
                      AntdInput_Helpers
                    ),
                    size: "large",
                    value: generateStateValueProp($state, [
                      "inputEmail",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "inputEmail.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"inputEmail"}
                      data-plasmic-override={overrides.inputEmail}
                      {...child$Props}
                    />
                  );
                })()}
              </FormItemWrapper>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__etjQ)}
              id={"3"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rlx7H
                )}
              >
                {"What type of speech are you giving?"}
              </div>
              <FormItemWrapper
                data-plasmic-name={"speechTypeInput"}
                data-plasmic-override={overrides.speechTypeInput}
                className={classNames("__wab_instance", sty.speechTypeInput)}
                hidden={false}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kEiGt
                    )}
                  >
                    {"Right, let's start with your first name"}
                  </div>
                }
                name={"firstName"}
                noLabel={true}
                noStyle={false}
                rules={[{ ruleType: "required" }]}
              >
                {(() => {
                  const child$Props = {
                    bordered: true,
                    className: classNames(
                      "__wab_instance",
                      sty.inputSpeechType
                    ),
                    onChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["inputSpeechType", "value"],
                      AntdInput_Helpers
                    ),
                    size: "large",
                    value: generateStateValueProp($state, [
                      "inputSpeechType",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "inputSpeechType.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"inputSpeechType"}
                      data-plasmic-override={overrides.inputSpeechType}
                      {...child$Props}
                    />
                  );
                })()}
              </FormItemWrapper>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__dRyGg)}
              id={"4"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dnsMb
                )}
              >
                {"Who will your speech be mainly addressed to?"}
              </div>
              <FormItemWrapper
                className={classNames("__wab_instance", sty.formField__iLyVw)}
                hidden={false}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qffbp
                    )}
                  >
                    {"Right, let's start with your first name"}
                  </div>
                }
                name={"firstName"}
                noLabel={true}
                noStyle={false}
                rules={[{ ruleType: "required" }]}
              >
                {(() => {
                  const child$Props = {
                    bordered: true,
                    className: classNames("__wab_instance", sty.inputRecipient),
                    onChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["inputRecipient", "value"],
                      AntdInput_Helpers
                    ),
                    size: "large",
                    value: generateStateValueProp($state, [
                      "inputRecipient",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "inputRecipient.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"inputRecipient"}
                      data-plasmic-override={overrides.inputRecipient}
                      {...child$Props}
                    />
                  );
                })()}
              </FormItemWrapper>
            </div>
            {(() => {
              try {
                return true;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__breKs)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sf1ML
                  )}
                >
                  {"What's their name?"}
                </div>
                <FormItemWrapper
                  className={classNames("__wab_instance", sty.formField__be2P2)}
                  hidden={false}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fyeI
                      )}
                    >
                      {"Right, let's start with your first name"}
                    </div>
                  }
                  name={"firstName"}
                  noLabel={true}
                  noStyle={false}
                  rules={[{ ruleType: "required" }]}
                >
                  {(() => {
                    const child$Props = {
                      bordered: true,
                      className: classNames(
                        "__wab_instance",
                        sty.inputRecipientName
                      ),
                      onChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["inputRecipientName", "value"],
                        AntdInput_Helpers
                      ),
                      size: "large",
                      value: generateStateValueProp($state, [
                        "inputRecipientName",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "inputRecipientName.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"inputRecipientName"}
                        data-plasmic-override={overrides.inputRecipientName}
                        {...child$Props}
                      />
                    );
                  })()}
                </FormItemWrapper>
              </div>
            ) : null}
            <div
              className={classNames(projectcss.all, sty.freeBox__zXH)}
              id={"5"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tbqJj
                )}
              >
                {"How would you describe them. in 3 words?"}
              </div>
              <FormItemWrapper
                className={classNames("__wab_instance", sty.formField__kXzT)}
                hidden={false}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__i6UPd
                    )}
                  >
                    {"Right, let's start with your first name"}
                  </div>
                }
                name={"firstName"}
                noLabel={true}
                noStyle={false}
                rules={[{ ruleType: "required" }]}
              >
                {(() => {
                  const child$Props = {
                    bordered: true,
                    className: classNames(
                      "__wab_instance",
                      sty.inputRecipient3Words
                    ),
                    onChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["inputRecipient3Words", "value"],
                      AntdInput_Helpers
                    ),
                    size: "large",
                    value: generateStateValueProp($state, [
                      "inputRecipient3Words",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "inputRecipient3Words.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"inputRecipient3Words"}
                      data-plasmic-override={overrides.inputRecipient3Words}
                      {...child$Props}
                    />
                  );
                })()}
              </FormItemWrapper>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__yQgKv)}
              id={"6"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9Z66
                )}
              >
                {"What\u2019s the name of their partner?"}
              </div>
              <FormItemWrapper
                className={classNames("__wab_instance", sty.formField__qhFp)}
                hidden={false}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aLdwR
                    )}
                  >
                    {"Right, let's start with your first name"}
                  </div>
                }
                name={"firstName"}
                noLabel={true}
                noStyle={false}
                rules={[{ ruleType: "required" }]}
              >
                {(() => {
                  const child$Props = {
                    bordered: true,
                    className: classNames(
                      "__wab_instance",
                      sty.inputPartnerName
                    ),
                    onChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["inputPartnerName", "value"],
                      AntdInput_Helpers
                    ),
                    size: "large",
                    value: generateStateValueProp($state, [
                      "inputPartnerName",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "inputPartnerName.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"inputPartnerName"}
                      data-plasmic-override={overrides.inputPartnerName}
                      {...child$Props}
                    />
                  );
                })()}
              </FormItemWrapper>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__eDmNk)}
              id={"7"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mCA
                )}
              >
                {"How would you describe them, in 3 words?"}
              </div>
              <FormItemWrapper
                className={classNames("__wab_instance", sty.formField__gQbV)}
                hidden={false}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__j55Wk
                    )}
                  >
                    {"Right, let's start with your first name"}
                  </div>
                }
                name={"firstName"}
                noLabel={true}
                noStyle={false}
                rules={[{ ruleType: "required" }]}
              >
                {(() => {
                  const child$Props = {
                    bordered: true,
                    className: classNames(
                      "__wab_instance",
                      sty.inputPartner3Wrods
                    ),
                    onChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["inputPartner3Wrods", "value"],
                      AntdInput_Helpers
                    ),
                    size: "large",
                    value: generateStateValueProp($state, [
                      "inputPartner3Wrods",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "inputPartner3Wrods.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"inputPartner3Wrods"}
                      data-plasmic-override={overrides.inputPartner3Wrods}
                      {...child$Props}
                    />
                  );
                })()}
              </FormItemWrapper>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__pFclc)}
              id={"8"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9CWDz
                )}
              >
                {"Is there any key message you want your speech to get across?"}
              </div>
              <FormItemWrapper
                className={classNames("__wab_instance", sty.formField__rnu7P)}
                hidden={false}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kwd9W
                    )}
                  >
                    {"Right, let's start with your first name"}
                  </div>
                }
                name={"firstName"}
                noLabel={true}
                noStyle={false}
                rules={[{ ruleType: "required" }]}
              >
                {(() => {
                  const child$Props = {
                    bordered: true,
                    className: classNames(
                      "__wab_instance",
                      sty.inputKeyMessage
                    ),
                    onChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["inputKeyMessage", "value"],
                      AntdInput_Helpers
                    ),
                    size: "large",
                    value: generateStateValueProp($state, [
                      "inputKeyMessage",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "inputKeyMessage.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"inputKeyMessage"}
                      data-plasmic-override={overrides.inputKeyMessage}
                      {...child$Props}
                    />
                  );
                })()}
              </FormItemWrapper>
            </div>
            <div className={classNames(projectcss.all, sty.columns__dHxps)}>
              <div className={classNames(projectcss.all, sty.column__x8Ei)}>
                <ChecksvgIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column__s5NBx)}>
                <Button
                  className={classNames("__wab_instance", sty.button__ekPhY)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateInput3Value"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["inputFirstName", "value"]
                            },
                            operation: 0
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateInput3Value"] != null &&
                      typeof $steps["updateInput3Value"] === "object" &&
                      typeof $steps["updateInput3Value"].then === "function"
                    ) {
                      $steps["updateInput3Value"] = await $steps[
                        "updateInput3Value"
                      ];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qfjKl
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return undefined;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Submit";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Button>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__hQd7V)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__khys2
                )}
              >
                {
                  "Thanks!  We're taking your information and generating possible themes and structures for your speech"
                }
              </div>
            </div>
          </section>
          <Button className={classNames("__wab_instance", sty.button__inYFl)} />

          <Button className={classNames("__wab_instance", sty.button__tdaYx)} />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__h5JgO
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $state.steps2.current;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <section className={classNames(projectcss.all, sty.section__zy07V)} />

          <section className={classNames(projectcss.all, sty.section___43PHc)}>
            <section className={classNames(projectcss.all, sty.section__j5Axr)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9MlSl,
                  "tease"
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Speech 1:"}
                  </span>
                  <React.Fragment>
                    {
                      "\nGood evening everyone, \n\nI'm andy, the best friend of the bride stacey. I would like to take the opportunity to thank everyone for taking the time to come and celebrate"
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
            </section>
            <section className={classNames(projectcss.all, sty.section__jEkE0)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ixOom
                )}
              >
                {"Unlock Your Speeches"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bCsb
                )}
              >
                {
                  "We'll help you get the details to make your speech a success "
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__byWrE
                )}
              >
                {"$29.99"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uFg53
                )}
              >
                {"One-Time Purchase - Lifetime Memory"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kkm9Q
                )}
              >
                {'Send My Speech to "email@email.com"'}
              </div>
              <Button
                className={classNames("__wab_instance", sty.button__uVzIa)}
                link={(() => {
                  try {
                    return "https://buy.stripe.com/4gwfZn1qpaID9ag5kl";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return `/speech-wizard`;
                    }
                    throw e;
                  }
                })()}
              >
                {"Get Speech Now"}
              </Button>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cfSgW
                )}
              >
                {"100% Money Back Guarantee"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8OrMv
                )}
              >
                {"What You Get:"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__jsslT)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__nXaZh)}
                  displayHeight={"16px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"16px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/wedding_speech_pro/images/icons8Checkmarkgif.gif",
                    fullWidth: 48,
                    fullHeight: 1344,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uXsZm
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"3 Unique Speeches"}
                    </span>
                    <React.Fragment>
                      {
                        ". No recycled templates. Just quality, tailored speeches. "
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___5Qk4A)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__r32Vv)}
                  displayHeight={"16px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"16px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/wedding_speech_pro/images/icons8Checkmarkgif.gif",
                    fullWidth: 48,
                    fullHeight: 1344,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__omfVl
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"Peace of Mind. "}
                    </span>
                    <React.Fragment>
                      {
                        "You'll have 3 great speeches, in your hand, ready to go."
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__vXi9)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__lwMO)}
                  displayHeight={"16px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"16px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/wedding_speech_pro/images/icons8Checkmarkgif.gif",
                    fullWidth: 48,
                    fullHeight: 1344,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__foCq5
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"100% Money Back Guarantee"}
                    </span>
                    <React.Fragment>
                      {". We deliver top quality speeches, or your money back"}
                    </React.Fragment>
                  </React.Fragment>
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__igeGm
                )}
              >
                {"See Refund Policy for Details"}
              </div>
              <section
                className={classNames(projectcss.all, sty.section__bUfj5)}
              >
                <div className={classNames(projectcss.all, sty.columns__tRPj7)}>
                  <div
                    className={classNames(projectcss.all, sty.column__sEs6V)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__uQnro)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"40px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/wedding_speech_pro/images/image14.svg",
                        fullWidth: 234,
                        fullHeight: 150,
                        aspectRatio: 1.56
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__o3Rq9)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__aDhGr)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"40px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/wedding_speech_pro/images/image15.svg",
                        fullWidth: 234,
                        fullHeight: 150,
                        aspectRatio: 1.56
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__gQ2Yu)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__tvnI)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"40px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/wedding_speech_pro/images/image12.svg",
                        fullWidth: 234,
                        fullHeight: 150,
                        aspectRatio: 1.56
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column___5Yvr)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__iRrVg)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"40px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/wedding_speech_pro/images/image13.svg",
                        fullWidth: 234,
                        fullHeight: 150,
                        aspectRatio: 1.56
                      }}
                    />
                  </div>
                </div>
              </section>
            </section>
          </section>
          <section className={classNames(projectcss.all, sty.section__c7OaN)}>
            <section className={classNames(projectcss.all, sty.section__odcFk)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mhTmf,
                  "tease"
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Speech 1:"}
                  </span>
                  <React.Fragment>
                    {
                      "\nGood evening everyone, \n\nI'm andy, the best friend of the bride stacey. I would like to take the opportunity to thank everyone for taking the time to come and celebrate"
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
            </section>
            <section className={classNames(projectcss.all, sty.section__oRDnF)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hu3R4
                )}
              >
                {"Unlock Your Speeches"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lwFvf
                )}
              >
                {
                  "We'll help you get the details to make your speech a success "
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nxnNq
                )}
              >
                {"$29.99"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__huFpf
                )}
              >
                {"One-Time Purchase - Lifetime Memory"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zoH7A
                )}
              >
                {'Send My Speech to "email@email.com"'}
              </div>
              <Button
                className={classNames("__wab_instance", sty.button__ikh3D)}
                link={(() => {
                  try {
                    return "https://buy.stripe.com/4gwfZn1qpaID9ag5kl";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return `/speech-wizard`;
                    }
                    throw e;
                  }
                })()}
              >
                {"Get Speech Now"}
              </Button>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xPgek
                )}
              >
                {"100% Money Back Guarantee"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wokWu
                )}
              >
                {"What You Get:"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___7Zsjp)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__c961)}
                  displayHeight={"16px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"16px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/wedding_speech_pro/images/icons8Checkmarkgif.gif",
                    fullWidth: 48,
                    fullHeight: 1344,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__b0Db3
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"3 Unique Speeches"}
                    </span>
                    <React.Fragment>
                      {
                        ". No recycled templates. Just quality, tailored speeches. "
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__bQlXb)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__jIt4K)}
                  displayHeight={"16px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"16px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/wedding_speech_pro/images/icons8Checkmarkgif.gif",
                    fullWidth: 48,
                    fullHeight: 1344,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2Fq9
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"Peace of Mind. "}
                    </span>
                    <React.Fragment>
                      {
                        "You'll have 3 great speeches, in your hand, ready to go."
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__wNsEn)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__wWhW)}
                  displayHeight={"16px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"16px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/wedding_speech_pro/images/icons8Checkmarkgif.gif",
                    fullWidth: 48,
                    fullHeight: 1344,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4IgoL
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"100% Money Back Guarantee"}
                    </span>
                    <React.Fragment>
                      {". We deliver top quality speeches, or your money back"}
                    </React.Fragment>
                  </React.Fragment>
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__s0D5C
                )}
              >
                {"See Refund Policy for Details"}
              </div>
              <section
                className={classNames(projectcss.all, sty.section__iw9Tc)}
              >
                <div className={classNames(projectcss.all, sty.columns__oY8DD)}>
                  <div
                    className={classNames(projectcss.all, sty.column__wwAPy)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__yWuYe)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"40px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/wedding_speech_pro/images/image14.svg",
                        fullWidth: 234,
                        fullHeight: 150,
                        aspectRatio: 1.56
                      }}
                    />
                  </div>
                  <div className={classNames(projectcss.all, sty.column__hvEq)}>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__hyTxg)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"40px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/wedding_speech_pro/images/image15.svg",
                        fullWidth: 234,
                        fullHeight: 150,
                        aspectRatio: 1.56
                      }}
                    />
                  </div>
                  <div className={classNames(projectcss.all, sty.column__ae5G)}>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___2S0Dg)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"40px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/wedding_speech_pro/images/image12.svg",
                        fullWidth: 234,
                        fullHeight: 150,
                        aspectRatio: 1.56
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__zt8Rb)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__j6XKx)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"40px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/wedding_speech_pro/images/image13.svg",
                        fullWidth: 234,
                        fullHeight: 150,
                        aspectRatio: 1.56
                      }}
                    />
                  </div>
                </div>
              </section>
            </section>
          </section>
          <section className={classNames(projectcss.all, sty.section__cfUfg)}>
            <AntdSteps
              data-plasmic-name={"steps"}
              data-plasmic-override={overrides.steps}
              className={classNames("__wab_instance", sty.steps)}
              current={generateStateValueProp($state, ["steps", "current"])}
              items={(() => {
                const __composite = [
                  { title: null, description: null },
                  { title: null, description: null },
                  { title: null, description: null }
                ];
                __composite["0"]["title"] = "Establish Your Themes";
                __composite["0"]["description"] = ``;
                __composite["1"]["title"] = "Make Your Stories Pop";
                __composite["1"]["description"] = ``;
                __composite["2"]["title"] = "Intros and Outros";
                __composite["2"]["description"] = ``;
                return __composite;
              })()}
              onChange={generateStateOnChangeProp($state, ["steps", "current"])}
            />

            <div className={classNames(projectcss.all, sty.columns__bzVk0)}>
              <div className={classNames(projectcss.all, sty.column__hCeIy)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__amkCw,
                    "tease"
                  )}
                >
                  {
                    "Theme 1: Empathetic Joy & Witty Dedication\n\nThis speech celebrates the fusion of [Bride's Name]'s empathetic joy and [Groom's Name]'s witty dedication. We'll start with how her empathy and creativity touch the hearts around her, matched by his quick wit and commitment to everything he does. The speech will have anecdotes showcasing their togetherness \u2013 perhaps a story of how they creatively solved a challenge, using his humor and her ingenuity. It ends by celebrating their journey, emphasizing that their togetherness is their greatest strength, bringing out the best in each other and everyone they meet"
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__vNw1I)}>
                <section
                  className={classNames(projectcss.all, sty.section__q60Fv)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___7AbbE
                    )}
                  >
                    {"Finish Your Speech"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__riCe1
                    )}
                  >
                    {"We'll get the stories to match the best structure"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pI6Zq
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ textDecorationLine: "line-through" }}
                      >
                        {"$29.99"}
                      </span>
                      <React.Fragment> </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#ff4d4f" }}
                      >
                        {"$19.99"}
                      </span>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wd9CY
                    )}
                  >
                    {"One-Time Purchase - Lifetime Memory"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__g80Sz
                    )}
                  >
                    {'Send My Speech to "email@email.com"'}
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__s1TaD)}
                    color={"yellow"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jgRig
                      )}
                    >
                      {"Get Speech Now"}
                    </div>
                  </Button>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___73TXr
                    )}
                  >
                    {"100% Money Back Guarantee"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nlGgS
                    )}
                  >
                    {"What You Get:"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mXv6S)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__aWj0M)}
                      displayHeight={"16px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"16px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/wedding_speech_pro/images/icons8Checkmarkgif.gif",
                        fullWidth: 48,
                        fullHeight: 1344,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3EqV
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"6 Speech Outlines"}
                        </span>
                        <React.Fragment>
                          {
                            ". No recycled templates. Just quality, tailored outlines. "
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___04Ll)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__j4Mfk)}
                      displayHeight={"16px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"16px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/wedding_speech_pro/images/icons8Checkmarkgif.gif",
                        fullWidth: 48,
                        fullHeight: 1344,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bzpZb
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"3 Unique Speeches"}
                        </span>
                        <React.Fragment>
                          {
                            ". No generic content. Just speeches with your feelings & stories."
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__brU1T)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__vT0Up)}
                      displayHeight={"16px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"16px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/wedding_speech_pro/images/icons8Checkmarkgif.gif",
                        fullWidth: 48,
                        fullHeight: 1344,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__afMon
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Peace of Mind. "}
                        </span>
                        <React.Fragment>
                          {
                            "You'll have 3 great speeches, in your inbox, ready to go. "
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tbyGx)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__hx8N7)}
                      displayHeight={"16px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"16px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/wedding_speech_pro/images/icons8Checkmarkgif.gif",
                        fullWidth: 48,
                        fullHeight: 1344,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__d0B16
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"100% Money Back Guarantee"}
                        </span>
                        <React.Fragment>
                          {
                            ". We deliver top quality speeches, or your money back"
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mKsC3
                    )}
                  >
                    {"See Refund Policy for Details"}
                  </div>
                  <section
                    className={classNames(projectcss.all, sty.section__fkdkv)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.columns__uv8G7)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__p5R9L
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__kvD37)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"40px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/wedding_speech_pro/images/image14.svg",
                            fullWidth: 234,
                            fullHeight: 150,
                            aspectRatio: 1.56
                          }}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__goPp4
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__qxpF4)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"40px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/wedding_speech_pro/images/image15.svg",
                            fullWidth: 234,
                            fullHeight: 150,
                            aspectRatio: 1.56
                          }}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__mU57L
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___8Cuwh)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"40px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/wedding_speech_pro/images/image12.svg",
                            fullWidth: 234,
                            fullHeight: 150,
                            aspectRatio: 1.56
                          }}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__vBhN2
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__nYBzG)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"40px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/wedding_speech_pro/images/image13.svg",
                            fullWidth: 234,
                            fullHeight: 150,
                            aspectRatio: 1.56
                          }}
                        />
                      </div>
                    </div>
                  </section>
                </section>
              </div>
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section__nBcZw)}>
            <div className={classNames(projectcss.all, sty.columns___74QN)}>
              <div className={classNames(projectcss.all, sty.column__rvKlV)}>
                <Steppaz
                  data-plasmic-name={"steppaz"}
                  data-plasmic-override={overrides.steppaz}
                  className={classNames("__wab_instance", sty.steppaz)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___77Ooj,
                    "tease"
                  )}
                >
                  {
                    "Theme 1: Empathetic Joy & Witty Dedication\n\nThis speech celebrates the fusion of [Bride's Name]'s empathetic joy and [Groom's Name]'s witty dedication. We'll start with how her empathy and creativity touch the hearts around her, matched by his quick wit and commitment to everything he does. The speech will have anecdotes showcasing their togetherness \u2013 perhaps a story of how they creatively solved a challenge, using his humor and her ingenuity. It ends by celebrating their journey, emphasizing that their togetherness is their greatest strength, bringing out the best in each other and everyone they meet"
                  }
                </div>
                <section
                  className={classNames(projectcss.all, sty.section__duPux)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aeKol
                    )}
                  >
                    {"Finish Your Speech"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ndvQ8
                    )}
                  >
                    {"We'll get the stories to match the best structure"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__c33Ox
                    )}
                  >
                    {"$29.99"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gwOMn
                    )}
                  >
                    {"One-Time Purchase - Lifetime Memory"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oFRlX
                    )}
                  >
                    {'Send My Speech to "email@email.com"'}
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__hd4Jk)}
                    color={"yellow"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bD8CZ
                      )}
                    >
                      {"Get Speech Now"}
                    </div>
                  </Button>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sca6J
                    )}
                  >
                    {"100% Money Back Guarantee"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hYaH
                    )}
                  >
                    {"What You Get:"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___8FXmG)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__vKA2)}
                      displayHeight={"16px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"16px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/wedding_speech_pro/images/icons8Checkmarkgif.gif",
                        fullWidth: 48,
                        fullHeight: 1344,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__opDlc
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"6 Speech Outlines"}
                        </span>
                        <React.Fragment>
                          {
                            ". No recycled templates. Just quality, tailored outlines. "
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gP3E)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__dh1D)}
                      displayHeight={"16px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"16px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/wedding_speech_pro/images/icons8Checkmarkgif.gif",
                        fullWidth: 48,
                        fullHeight: 1344,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9Nf
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"3 Unique Speeches"}
                        </span>
                        <React.Fragment>
                          {
                            ". No generic content. Just speeches with your feelings & stories."
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cmNeb)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__vpZml)}
                      displayHeight={"16px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"16px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/wedding_speech_pro/images/icons8Checkmarkgif.gif",
                        fullWidth: 48,
                        fullHeight: 1344,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pzLuS
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Peace of Mind. "}
                        </span>
                        <React.Fragment>
                          {
                            "You'll have 3 great speeches, in your inbox, ready to go. "
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___547Eb)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__rTgAd)}
                      displayHeight={"16px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"16px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/wedding_speech_pro/images/icons8Checkmarkgif.gif",
                        fullWidth: 48,
                        fullHeight: 1344,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0Qcxe
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"100% Money Back Guarantee"}
                        </span>
                        <React.Fragment>
                          {
                            ". We deliver top quality speeches, or your money back"
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__th2L5
                    )}
                  >
                    {"See Refund Policy for Details"}
                  </div>
                  <section
                    className={classNames(projectcss.all, sty.section__uYxq)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.columns__kns29)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__jxGer
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__ec13D)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"40px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/wedding_speech_pro/images/image14.svg",
                            fullWidth: 234,
                            fullHeight: 150,
                            aspectRatio: 1.56
                          }}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__y0PTd
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__j8J)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"40px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/wedding_speech_pro/images/image15.svg",
                            fullWidth: 234,
                            fullHeight: 150,
                            aspectRatio: 1.56
                          }}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___0Ed0T
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__x141C)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"40px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/wedding_speech_pro/images/image12.svg",
                            fullWidth: 234,
                            fullHeight: 150,
                            aspectRatio: 1.56
                          }}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__o03KJ
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__agOxP)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"40px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/wedding_speech_pro/images/image13.svg",
                            fullWidth: 234,
                            fullHeight: 150,
                            aspectRatio: 1.56
                          }}
                        />
                      </div>
                    </div>
                  </section>
                </section>
              </div>
            </div>
          </section>
          <div className={classNames(projectcss.all, sty.columns__o3LE)}>
            <div className={classNames(projectcss.all, sty.column__j1RpB)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tl9G2,
                  "tease"
                )}
              >
                {
                  "Theme 1: Empathetic Joy & Witty Dedication\n\nThis speech celebrates the fusion of [Bride's Name]'s empathetic joy and [Groom's Name]'s witty dedication. We'll start with how her empathy and creativity touch the hearts around her, matched by his quick wit and commitment to everything he does. The speech will have anecdotes showcasing their togetherness \u2013 perhaps a story of how they creatively solved a challenge, using his humor and her ingenuity. It ends by celebrating their journey, emphasizing that their togetherness is their greatest strength, bringing out the best in each other and everyone they meet"
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.column__t9ZIm)}>
              <section
                className={classNames(projectcss.all, sty.section___9Punh)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__y7R8M
                  )}
                >
                  {"Finish Your Speech"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__preBn
                  )}
                >
                  {"We'll get the stories to match the best structure"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kQa8X
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ textDecorationLine: "line-through" }}
                    >
                      {"$29.99"}
                    </span>
                    <React.Fragment> </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#ff4d4f" }}
                    >
                      {"$19.99"}
                    </span>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__w3ZaP
                  )}
                >
                  {"One-Time Purchase - Lifetime Memory"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__n7Hmm
                  )}
                >
                  {'Send My Speech to "email@email.com"'}
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button__cF4H)}
                  color={"yellow"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wINtp
                    )}
                  >
                    {"Get Speech Now"}
                  </div>
                </Button>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__srFyu
                  )}
                >
                  {"100% Money Back Guarantee"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qqQnr
                  )}
                >
                  {"What You Get:"}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__wb3VP)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__j5Hra)}
                    displayHeight={"16px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"16px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/wedding_speech_pro/images/icons8Checkmarkgif.gif",
                      fullWidth: 48,
                      fullHeight: 1344,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xDcYi
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"6 Speech Outlines"}
                      </span>
                      <React.Fragment>
                        {
                          ". No recycled templates. Just quality, tailored outlines. "
                        }
                      </React.Fragment>
                    </React.Fragment>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__rZzop)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__onIq5)}
                    displayHeight={"16px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"16px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/wedding_speech_pro/images/icons8Checkmarkgif.gif",
                      fullWidth: 48,
                      fullHeight: 1344,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zopIz
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"3 Unique Speeches"}
                      </span>
                      <React.Fragment>
                        {
                          ". No generic content. Just speeches with your feelings & stories."
                        }
                      </React.Fragment>
                    </React.Fragment>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__ibZWv)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__c80Te)}
                    displayHeight={"16px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"16px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/wedding_speech_pro/images/icons8Checkmarkgif.gif",
                      fullWidth: 48,
                      fullHeight: 1344,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__n2MQg
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Peace of Mind. "}
                      </span>
                      <React.Fragment>
                        {
                          "You'll have 3 great speeches, in your inbox, ready to go. "
                        }
                      </React.Fragment>
                    </React.Fragment>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___7SSYv)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__n61Ks)}
                    displayHeight={"16px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"16px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/wedding_speech_pro/images/icons8Checkmarkgif.gif",
                      fullWidth: 48,
                      fullHeight: 1344,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__izN
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"100% Money Back Guarantee"}
                      </span>
                      <React.Fragment>
                        {
                          ". We deliver top quality speeches, or your money back"
                        }
                      </React.Fragment>
                    </React.Fragment>
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1Zvay
                  )}
                >
                  {"See Refund Policy for Details"}
                </div>
                <section
                  className={classNames(projectcss.all, sty.section__vsW8E)}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns__x5BUx)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__sOjl9)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__ytv0I)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"40px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/wedding_speech_pro/images/image14.svg",
                          fullWidth: 234,
                          fullHeight: 150,
                          aspectRatio: 1.56
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column___91HBi)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__nTwlQ)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"40px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/wedding_speech_pro/images/image15.svg",
                          fullWidth: 234,
                          fullHeight: 150,
                          aspectRatio: 1.56
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__jrJl)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__iIjGo)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"40px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/wedding_speech_pro/images/image12.svg",
                          fullWidth: 234,
                          fullHeight: 150,
                          aspectRatio: 1.56
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__q7Odv)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__h7MhU)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"40px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/wedding_speech_pro/images/image13.svg",
                          fullWidth: 234,
                          fullHeight: 150,
                          aspectRatio: 1.56
                        }}
                      />
                    </div>
                  </div>
                </section>
              </section>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "globalHeader2",
    "steps2",
    "q1",
    "firstNameInput",
    "inputFirstName",
    "emailInput",
    "inputEmail",
    "speechTypeInput",
    "inputSpeechType",
    "inputRecipient",
    "inputRecipientName",
    "inputRecipient3Words",
    "inputPartnerName",
    "inputPartner3Wrods",
    "inputKeyMessage",
    "svg",
    "steps",
    "steppaz"
  ],
  globalHeader2: ["globalHeader2"],
  steps2: ["steps2"],
  q1: ["q1", "firstNameInput", "inputFirstName"],
  firstNameInput: ["firstNameInput", "inputFirstName"],
  inputFirstName: ["inputFirstName"],
  emailInput: ["emailInput", "inputEmail"],
  inputEmail: ["inputEmail"],
  speechTypeInput: ["speechTypeInput", "inputSpeechType"],
  inputSpeechType: ["inputSpeechType"],
  inputRecipient: ["inputRecipient"],
  inputRecipientName: ["inputRecipientName"],
  inputRecipient3Words: ["inputRecipient3Words"],
  inputPartnerName: ["inputPartnerName"],
  inputPartner3Wrods: ["inputPartner3Wrods"],
  inputKeyMessage: ["inputKeyMessage"],
  svg: ["svg"],
  steps: ["steps"],
  steppaz: ["steppaz"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  globalHeader2: typeof GlobalHeader2;
  steps2: typeof AntdSteps;
  q1: "div";
  firstNameInput: typeof FormItemWrapper;
  inputFirstName: typeof AntdInput;
  emailInput: typeof FormItemWrapper;
  inputEmail: typeof AntdInput;
  speechTypeInput: typeof FormItemWrapper;
  inputSpeechType: typeof AntdInput;
  inputRecipient: typeof AntdInput;
  inputRecipientName: typeof AntdInput;
  inputRecipient3Words: typeof AntdInput;
  inputPartnerName: typeof AntdInput;
  inputPartner3Wrods: typeof AntdInput;
  inputKeyMessage: typeof AntdInput;
  svg: "svg";
  steps: typeof AntdSteps;
  steppaz: typeof Steppaz;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage__VariantsArgs;
    args?: PlasmicNewPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewPage__ArgProps,
          internalVariantPropNames: PlasmicNewPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage";
  } else {
    func.displayName = `PlasmicNewPage.${nodeName}`;
  }
  return func;
}

export const PlasmicNewPage = Object.assign(
  // Top-level PlasmicNewPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    globalHeader2: makeNodeComponent("globalHeader2"),
    steps2: makeNodeComponent("steps2"),
    q1: makeNodeComponent("q1"),
    firstNameInput: makeNodeComponent("firstNameInput"),
    inputFirstName: makeNodeComponent("inputFirstName"),
    emailInput: makeNodeComponent("emailInput"),
    inputEmail: makeNodeComponent("inputEmail"),
    speechTypeInput: makeNodeComponent("speechTypeInput"),
    inputSpeechType: makeNodeComponent("inputSpeechType"),
    inputRecipient: makeNodeComponent("inputRecipient"),
    inputRecipientName: makeNodeComponent("inputRecipientName"),
    inputRecipient3Words: makeNodeComponent("inputRecipient3Words"),
    inputPartnerName: makeNodeComponent("inputPartnerName"),
    inputPartner3Wrods: makeNodeComponent("inputPartner3Wrods"),
    inputKeyMessage: makeNodeComponent("inputKeyMessage"),
    svg: makeNodeComponent("svg"),
    steps: makeNodeComponent("steps"),
    steppaz: makeNodeComponent("steppaz"),

    // Metadata about props expected for PlasmicNewPage
    internalVariantProps: PlasmicNewPage__VariantProps,
    internalArgProps: PlasmicNewPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewPage;
/* prettier-ignore-end */
