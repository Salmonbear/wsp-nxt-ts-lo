// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sj7u5T6A4j1Xdo61ZkYEWA
// Component: dkzgHhlBBoah

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Card from "../../Card"; // plasmic-import: 0G-Nrgl3HZEo/component
import { AntdAvatar } from "@plasmicpkgs/antd5/skinny/registerAvatar";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sj7u5T6A4j1Xdo61ZkYEWA/projectcss
import sty from "./PlasmicSocialProof.module.css"; // plasmic-import: dkzgHhlBBoah/css

createPlasmicElementProxy;

export type PlasmicSocialProof__VariantMembers = {};
export type PlasmicSocialProof__VariantsArgs = {};
type VariantPropType = keyof PlasmicSocialProof__VariantsArgs;
export const PlasmicSocialProof__VariantProps = new Array<VariantPropType>();

export type PlasmicSocialProof__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicSocialProof__ArgsType;
export const PlasmicSocialProof__ArgProps = new Array<ArgPropType>("children");

export type PlasmicSocialProof__OverridesType = {
  root?: Flex__<"a"> & Partial<LinkProps>;
  card?: Flex__<typeof Card>;
  avatar?: Flex__<typeof AntdAvatar>;
};

export interface DefaultSocialProofProps {
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSocialProof__RenderFunc(props: {
  variants: PlasmicSocialProof__VariantsArgs;
  args: PlasmicSocialProof__ArgsType;
  overrides: PlasmicSocialProof__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <PlasmicLink__
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      component={Link}
      platform={"nextjs"}
    >
      <Card
        data-plasmic-name={"card"}
        data-plasmic-override={overrides.card}
        className={classNames("__wab_instance", sty.card)}
        title={
          <React.Fragment>
            <AntdAvatar
              data-plasmic-name={"avatar"}
              data-plasmic-override={overrides.avatar}
              className={classNames("__wab_instance", sty.avatar)}
              letters={"AB"}
              src={
                "/plasmic/wedding_speech_pro/images/dalle20231206021142PortraitOfASlightlyOverweightBaldingFatherOfTheBrideWithAWarmAndGenuineSmileHeHasAFriendlyAndApproachableLookWithKindEyespng.png"
              }
            />

            <div className={classNames(projectcss.all, sty.freeBox__bgeKg)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jmUS
                )}
              >
                {"Austin"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0FrUm
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 400 }}
                  >
                    {"Father of the Bride"}
                  </span>
                </React.Fragment>
              </div>
            </div>
          </React.Fragment>
        }
      >
        <div className={classNames(projectcss.all, sty.freeBox__sfJmx)}>
          <div className={classNames(projectcss.all, sty.freeBox___4I2QY)}>
            {renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.celebrities[2].social_proof;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "I'm not a man of many words, so the pressure of speaking at my daughter's wedding was overwhelming.\nWedding Speech Pro was a lifesaver.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              ),
              value: args.children,
              className: classNames(sty.slotTargetChildren)
            })}
          </div>
        </div>
      </Card>
    </PlasmicLink__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "card", "avatar"],
  card: ["card", "avatar"],
  avatar: ["avatar"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "a";
  card: typeof Card;
  avatar: typeof AntdAvatar;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSocialProof__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSocialProof__VariantsArgs;
    args?: PlasmicSocialProof__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSocialProof__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSocialProof__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSocialProof__ArgProps,
          internalVariantPropNames: PlasmicSocialProof__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSocialProof__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSocialProof";
  } else {
    func.displayName = `PlasmicSocialProof.${nodeName}`;
  }
  return func;
}

export const PlasmicSocialProof = Object.assign(
  // Top-level PlasmicSocialProof renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    card: makeNodeComponent("card"),
    avatar: makeNodeComponent("avatar"),

    // Metadata about props expected for PlasmicSocialProof
    internalVariantProps: PlasmicSocialProof__VariantProps,
    internalArgProps: PlasmicSocialProof__ArgProps
  }
);

export default PlasmicSocialProof;
/* prettier-ignore-end */
