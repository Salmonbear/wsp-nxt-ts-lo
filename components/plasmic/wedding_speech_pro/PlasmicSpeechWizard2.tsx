// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sj7u5T6A4j1Xdo61ZkYEWA
// Component: 6y7Im95YJWws

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import GlobalHeader2 from "../../GlobalHeader2"; // plasmic-import: DWQ8Kd-IAGYP/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Button from "../../Button"; // plasmic-import: Dy4L9PNlqEQ/component
import SocialProof from "../../SocialProof"; // plasmic-import: dkzgHhlBBoah/component
import GlobalFooter from "../../GlobalFooter"; // plasmic-import: wRdBAJMlIHx/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sj7u5T6A4j1Xdo61ZkYEWA/projectcss
import sty from "./PlasmicSpeechWizard2.module.css"; // plasmic-import: 6y7Im95YJWws/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: mDNbn1ZLKrHu/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 5HAw4RHFxpJq/icon

createPlasmicElementProxy;

export type PlasmicSpeechWizard2__VariantMembers = {};
export type PlasmicSpeechWizard2__VariantsArgs = {};
type VariantPropType = keyof PlasmicSpeechWizard2__VariantsArgs;
export const PlasmicSpeechWizard2__VariantProps = new Array<VariantPropType>();

export type PlasmicSpeechWizard2__ArgsType = {};
type ArgPropType = keyof PlasmicSpeechWizard2__ArgsType;
export const PlasmicSpeechWizard2__ArgProps = new Array<ArgPropType>();

export type PlasmicSpeechWizard2__OverridesType = {
  root?: Flex__<"div">;
  globalHeader2?: Flex__<typeof GlobalHeader2>;
  section?: Flex__<"section">;
  embedHtml?: Flex__<typeof Embed>;
  columns?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  img?: Flex__<typeof PlasmicImg__>;
  socialProof?: Flex__<typeof SocialProof>;
  globalFooter?: Flex__<typeof GlobalFooter>;
};

export interface DefaultSpeechWizard2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSpeechWizard2__RenderFunc(props: {
  variants: PlasmicSpeechWizard2__VariantsArgs;
  args: PlasmicSpeechWizard2__ArgsType;
  overrides: PlasmicSpeechWizard2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "surveyEnabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return typeof $ctx.query.confirm !== "undefined";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />

        <meta
          key="og:image"
          property="og:image"
          content={PlasmicSpeechWizard2.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicSpeechWizard2.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <GlobalHeader2
            data-plasmic-name={"globalHeader2"}
            data-plasmic-override={overrides.globalHeader2}
            className={classNames("__wab_instance", sty.globalHeader2)}
          />

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            {(() => {
              try {
                return $state.surveyEnabled === true;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Embed
                data-plasmic-name={"embedHtml"}
                data-plasmic-override={overrides.embedHtml}
                className={classNames("__wab_instance", sty.embedHtml)}
                code={
                  '<iframe data-tally-src="https://tally.so/embed/nP9b2V?alignLeft=1&hideTitle=1&transparentBackground=1&dynamicHeight=1" loading="lazy" width="100%" height="174" frameborder="0" marginheight="0" marginwidth="0" title="Test  Form"></iframe><script>var d=document,w="https://tally.so/widgets/embed.js",v=function(){"undefined"!=typeof Tally?Tally.loadEmbeds():d.querySelectorAll("iframe[data-tally-src]:not([src])").forEach((function(e){e.src=e.dataset.tallySrc}))};if("undefined"!=typeof Tally)v();else if(d.querySelector(\'script[src="\'+w+\'"]\')==null){var s=d.createElement("script");s.src=w,s.onload=v,s.onerror=v,d.body.appendChild(s);}</script>\n'
                }
              />
            ) : null}
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__hrx8H)}>
                <div
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  className={classNames(projectcss.all, sty.freeBox)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lhGx
                    )}
                  >
                    {"Ready to Nail Your \nWedding Speech? "}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__df97C
                    )}
                  >
                    {
                      "We'll guide you through the process, ask you a few questions and you'll have your speech in minutes"
                    }
                  </div>
                </div>
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  color={"yellow"}
                  link={"https://buy.stripe.com/4gwfZn1qpaID9ag5kl"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateSurveyEnabled"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["surveyEnabled"]
                            },
                            operation: 0
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSurveyEnabled"] != null &&
                      typeof $steps["updateSurveyEnabled"] === "object" &&
                      typeof $steps["updateSurveyEnabled"].then === "function"
                    ) {
                      $steps["updateSurveyEnabled"] = await $steps[
                        "updateSurveyEnabled"
                      ];
                    }
                  }}
                >
                  {"Start Questionnaire"}
                </Button>
              </div>
              <div className={classNames(projectcss.all, sty.column__ex8EJ)}>
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"459px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/wedding_speech_pro/images/pika17017044562671X1Png.png",
                    fullWidth: 1275,
                    fullHeight: 970,
                    aspectRatio: undefined
                  }}
                />

                <SocialProof
                  data-plasmic-name={"socialProof"}
                  data-plasmic-override={overrides.socialProof}
                  className={classNames("__wab_instance", sty.socialProof)}
                />
              </div>
            </div>
          </section>
          <GlobalFooter
            data-plasmic-name={"globalFooter"}
            data-plasmic-override={overrides.globalFooter}
            className={classNames("__wab_instance", sty.globalFooter)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "globalHeader2",
    "section",
    "embedHtml",
    "columns",
    "freeBox",
    "button",
    "img",
    "socialProof",
    "globalFooter"
  ],
  globalHeader2: ["globalHeader2"],
  section: [
    "section",
    "embedHtml",
    "columns",
    "freeBox",
    "button",
    "img",
    "socialProof"
  ],
  embedHtml: ["embedHtml"],
  columns: ["columns", "freeBox", "button", "img", "socialProof"],
  freeBox: ["freeBox"],
  button: ["button"],
  img: ["img"],
  socialProof: ["socialProof"],
  globalFooter: ["globalFooter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  globalHeader2: typeof GlobalHeader2;
  section: "section";
  embedHtml: typeof Embed;
  columns: "div";
  freeBox: "div";
  button: typeof Button;
  img: typeof PlasmicImg__;
  socialProof: typeof SocialProof;
  globalFooter: typeof GlobalFooter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSpeechWizard2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSpeechWizard2__VariantsArgs;
    args?: PlasmicSpeechWizard2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSpeechWizard2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSpeechWizard2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSpeechWizard2__ArgProps,
          internalVariantPropNames: PlasmicSpeechWizard2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSpeechWizard2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSpeechWizard2";
  } else {
    func.displayName = `PlasmicSpeechWizard2.${nodeName}`;
  }
  return func;
}

export const PlasmicSpeechWizard2 = Object.assign(
  // Top-level PlasmicSpeechWizard2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    globalHeader2: makeNodeComponent("globalHeader2"),
    section: makeNodeComponent("section"),
    embedHtml: makeNodeComponent("embedHtml"),
    columns: makeNodeComponent("columns"),
    freeBox: makeNodeComponent("freeBox"),
    button: makeNodeComponent("button"),
    img: makeNodeComponent("img"),
    socialProof: makeNodeComponent("socialProof"),
    globalFooter: makeNodeComponent("globalFooter"),

    // Metadata about props expected for PlasmicSpeechWizard2
    internalVariantProps: PlasmicSpeechWizard2__VariantProps,
    internalArgProps: PlasmicSpeechWizard2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc:
        "https://site-assets.plasmic.app/eb770fb69aaf7fb97e27c4975f86b18d.png",
      canonical: ""
    }
  }
);

export default PlasmicSpeechWizard2;
/* prettier-ignore-end */
