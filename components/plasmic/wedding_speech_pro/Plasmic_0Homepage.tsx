// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sj7u5T6A4j1Xdo61ZkYEWA
// Component: zdThY8Gmr_It

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import GlobalHeader2 from "../../GlobalHeader2"; // plasmic-import: DWQ8Kd-IAGYP/component
import Button from "../../Button"; // plasmic-import: Dy4L9PNlqEQ/component
import { DataProvider } from "@plasmicpkgs/plasmic-basic-components";
import SocialProof from "../../SocialProof"; // plasmic-import: dkzgHhlBBoah/component
import Card from "../../Card"; // plasmic-import: 0G-Nrgl3HZEo/component
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import GlobalFooter from "../../GlobalFooter"; // plasmic-import: wRdBAJMlIHx/component

import { useScreenVariants as useScreenVariantszbPet7MzObh } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: zbPET7mzOBH/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sj7u5T6A4j1Xdo61ZkYEWA/projectcss
import sty from "./Plasmic_0Homepage.module.css"; // plasmic-import: zdThY8Gmr_It/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: mDNbn1ZLKrHu/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 5HAw4RHFxpJq/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: RcTLi5Mk7bq/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: BvfAcFiGd3i/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: bqxbIPzPFDS/icon

createPlasmicElementProxy;

export type Plasmic_0Homepage__VariantMembers = {};
export type Plasmic_0Homepage__VariantsArgs = {};
type VariantPropType = keyof Plasmic_0Homepage__VariantsArgs;
export const Plasmic_0Homepage__VariantProps = new Array<VariantPropType>();

export type Plasmic_0Homepage__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof Plasmic_0Homepage__ArgsType;
export const Plasmic_0Homepage__ArgProps = new Array<ArgPropType>("children");

export type Plasmic_0Homepage__OverridesType = {
  root?: Flex__<"div">;
  globalHeader2?: Flex__<typeof GlobalHeader2>;
  hero?: Flex__<"div">;
  presentButtons?: Flex__<"div">;
  socialProof?: Flex__<"section">;
  dataProvider?: Flex__<typeof DataProvider>;
  noResearchRequired?: Flex__<"div">;
  examples?: Flex__<"div">;
  examples4?: Flex__<"div">;
  examples1?: Flex__<"div">;
  examples2?: Flex__<"div">;
  process?: Flex__<"div">;
  faQs?: Flex__<"div">;
  accordion?: Flex__<typeof AntdAccordion>;
  callToAction2?: Flex__<"div">;
  globalFooter?: Flex__<typeof GlobalFooter>;
};

export interface Default_0HomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function Plasmic_0Homepage__RenderFunc(props: {
  variants: Plasmic_0Homepage__VariantsArgs;
  args: Plasmic_0Homepage__ArgsType;
  overrides: Plasmic_0Homepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "FAQ",

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszbPet7MzObh()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{Plasmic_0Homepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={Plasmic_0Homepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={Plasmic_0Homepage.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={Plasmic_0Homepage.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={Plasmic_0Homepage.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={Plasmic_0Homepage.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={Plasmic_0Homepage.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={Plasmic_0Homepage.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <GlobalHeader2
            data-plasmic-name={"globalHeader2"}
            data-plasmic-override={overrides.globalHeader2}
            className={classNames("__wab_instance", sty.globalHeader2)}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            hasGap={true}
            className={classNames(projectcss.all, sty.hero)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__ggbb)}>
              <div className={classNames(projectcss.all, sty.freeBox__a6Jwt)}>
                <div className={classNames(projectcss.all, sty.columns___5Dfd)}>
                  <div
                    className={classNames(projectcss.all, sty.column__wXhP6)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__jWQcc)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"388px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/wedding_speech_pro/images/image5.png",
                        fullWidth: 1024,
                        fullHeight: 1024,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__fiZy2)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__m1Q1M)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/wedding_speech_pro/images/turnSpeechWritingStress1Svg.svg",
                        fullWidth: 300,
                        fullHeight: 33,
                        aspectRatio: 9.001558
                      }}
                    />

                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__tJgkB)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/wedding_speech_pro/images/toSuccessInMinutessvg.svg",
                        fullWidth: 300,
                        fullHeight: 35,
                        aspectRatio: 8.504543
                      }}
                    />

                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__sijNp
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#00000080" }}
                        >
                          {"Wedding Speech Pro"}
                        </span>
                      </React.Fragment>
                    </h1>
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__yHyXe
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#000000" }}
                        >
                          {"Speech writing "}
                        </span>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontStyle: "italic", color: "#000000" }}
                        >
                          {"stress"}
                        </span>
                        <React.Fragment>{"\n"}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#000000" }}
                        >
                          {"to"}
                        </span>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#000000", fontStyle: "italic" }}
                        >
                          {" success"}
                        </span>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#000000" }}
                        >
                          {", in minutes."}
                        </span>
                      </React.Fragment>
                    </h1>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dUaAd
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontStyle: "italic" }}
                        >
                          {"Your"}
                        </span>
                        <React.Fragment>{" stories,  "}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontStyle: "italic" }}
                        >
                          {"your"}
                        </span>
                        <React.Fragment>{" feelings."}</React.Fragment>
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__f5BRl
                      )}
                    >
                      {"3 great speeches,\nin 5 minutes."}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kdCc2
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{"All for "}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{
                            textDecorationLine: "line-through",
                            color: "#BFBFBF"
                          }}
                        >
                          {"$39"}
                        </span>
                        <React.Fragment>{" $19"}</React.Fragment>
                      </React.Fragment>
                    </div>
                    <div
                      data-plasmic-name={"presentButtons"}
                      data-plasmic-override={overrides.presentButtons}
                      className={classNames(projectcss.all, sty.presentButtons)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__jfNRp
                        )}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button___0I5Tb
                          )}
                          color={"softSand"}
                          link={(() => {
                            try {
                              return $ctx.pagePath + "#process";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return `/speech-wizard`;
                              }
                              throw e;
                            }
                          })()}
                          onClick={async event => {
                            const $steps = {};

                            $steps["goToPage"] = true
                              ? (() => {
                                  const actionArgs = {
                                    destination: (() => {
                                      try {
                                        return $ctx.pagePath + "#process";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToPage"] != null &&
                              typeof $steps["goToPage"] === "object" &&
                              typeof $steps["goToPage"].then === "function"
                            ) {
                              $steps["goToPage"] = await $steps["goToPage"];
                            }
                          }}
                        >
                          {"How It Works"}
                        </Button>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___5X39
                        )}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__ejlan
                          )}
                          color={"yellow"}
                          link={`/speech-wizard`}
                        >
                          {"Get My Speech"}
                        </Button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <section
              data-plasmic-name={"socialProof"}
              data-plasmic-override={overrides.socialProof}
              className={classNames(projectcss.all, sty.socialProof)}
            >
              <DataProvider
                data-plasmic-name={"dataProvider"}
                data-plasmic-override={overrides.dataProvider}
                className={classNames("__wab_instance", sty.dataProvider)}
                data={[
                  {
                    name: "Emily",
                    speech_type: "Maid of Honor",
                    social_proof:
                      "Thanks to [Your Service], I crafted a maid of honor speech that resonated deeply. It perfectly captured our lifelong bond, leaving not a dry eye in the room \u2013 especially Sarah's!"
                  },
                  {
                    name: "Richard",
                    speech_type: "Father of the Bride",
                    social_proof:
                      "Using [Your Service] was a blessing. It helped me express my heart at Lisa's wedding. The speech was poignant, memorable, and moved everyone deeply."
                  },
                  {
                    name: "Alex",
                    speech_type: "Best Man",
                    social_proof:
                      "Thanks to [Your Service], my best man speech for Jake's wedding was a perfect blend of humor and heart. It got laughs and cheers, and Jake loved it!"
                  }
                ]}
                name={"celebrities"}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(projectcss.all, sty.columns__d8JeF)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $ctx.celebrities;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__bm2Er
                            )}
                            key={currentIndex}
                          >
                            {renderPlasmicSlot({
                              defaultContents: (_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return currentItem;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                const currentItem = __plasmic_item_1;
                                const currentIndex = __plasmic_idx_1;
                                return (
                                  <SocialProof
                                    className={classNames(
                                      "__wab_instance",
                                      sty.socialProof__e9R65
                                    )}
                                    key={currentIndex}
                                  />
                                );
                              }),
                              value: args.children
                            })}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__evAuV
                              )}
                            >
                              {"Enter some text"}
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  )}
                </DataCtxReader__>
              </DataProvider>
            </section>
          </Stack__>
          <div
            data-plasmic-name={"noResearchRequired"}
            data-plasmic-override={overrides.noResearchRequired}
            className={classNames(projectcss.all, sty.noResearchRequired)}
            id={"no-research"}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__mZoFv)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"264px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/wedding_speech_pro/images/image9.png",
                fullWidth: 1114,
                fullHeight: 1148,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gSluJ
              )}
            >
              {"No Research Required"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qXdXa
              )}
            >
              {
                "Tired of reading endless examples, templates and quotes? We get it. \nJust share some details with us, and we'll deliver a personalized, impactful wedding speech, without the homework."
              }
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___9ZBp9)}>
              <div className={classNames(projectcss.all, sty.columns__rqdZu)}>
                <div className={classNames(projectcss.all, sty.column__o89Jg)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__vrPh)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___36J8Z
                      )}
                    >
                      <Icon6Icon
                        className={classNames(projectcss.all, sty.svg__cXfq)}
                        role={"img"}
                      />
                    </div>
                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__szBmA
                        )}
                      >
                        <Icon6Icon
                          className={classNames(projectcss.all, sty.svg__bFu2I)}
                          role={"img"}
                        />
                      </div>
                    ) : null}
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__hpg5C)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__b2Mq5
                        )}
                      >
                        {"Your speech, our expertise"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yIKvk
                        )}
                      >
                        {
                          "Starting a speech can be the hardest part. We provide a clear path to go from initial thoughts to a compelling conclusion"
                        }
                      </div>
                    </Stack__>
                  </Stack__>
                </div>
                <div className={classNames(projectcss.all, sty.column__jRs1)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__clTq)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__bmHIx)}
                    >
                      <Icon8Icon
                        className={classNames(projectcss.all, sty.svg__rN6Uh)}
                        role={"img"}
                      />
                    </div>
                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__oU4Rh
                        )}
                      >
                        <Icon6Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___6UwFs
                          )}
                          role={"img"}
                        />
                      </div>
                    ) : null}
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox___3HH)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rlrbM
                        )}
                      >
                        {"Speech structure, simplified"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__to9Lc
                        )}
                      >
                        {
                          "Finding the right structure can be challenging. With our help, you'll have a well-organized speech that flows seamlessly, saving you time and effort"
                        }
                      </div>
                    </Stack__>
                  </Stack__>
                </div>
                <div className={classNames(projectcss.all, sty.column__rWcri)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___7VSaj)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tatlq)}
                    >
                      <Icon7Icon
                        className={classNames(projectcss.all, sty.svg__egObn)}
                        role={"img"}
                      />
                    </div>
                    {false ? (
                      <div
                        className={classNames(projectcss.all, sty.freeBox__xqW)}
                      >
                        <Icon6Icon
                          className={classNames(projectcss.all, sty.svg__qWmFa)}
                          role={"img"}
                        />
                      </div>
                    ) : null}
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__fSwq2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gandE
                        )}
                      >
                        {"Emotion, Humour, and Grace"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vesJ
                        )}
                      >
                        {
                          "Whether you want to make them laugh, cry, or both, our AI understands human emotions and crafts speeches that resonate."
                        }
                      </div>
                    </Stack__>
                  </Stack__>
                </div>
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"examples"}
            data-plasmic-override={overrides.examples}
            className={classNames(projectcss.all, sty.examples)}
            id={"examples"}
          >
            <div
              data-plasmic-name={"examples4"}
              data-plasmic-override={overrides.examples4}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.examples4
              )}
              id={"examples"}
            >
              {"Witty, Personal, Heartfelt"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jlgzu
              )}
            >
              {
                " Our process uses AI, but our outputs are human-centric. \nWe provide speeches that are engaging, customised and resonate with both you and the audience."
              }
            </div>
            <div
              data-plasmic-name={"examples1"}
              data-plasmic-override={overrides.examples1}
              className={classNames(projectcss.all, sty.examples1)}
            >
              <div className={classNames(projectcss.all, sty.column__zVcY2)}>
                <Card
                  className={classNames("__wab_instance", sty.card__qJxjc)}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__o3Ow4
                      )}
                    >
                      {"Excerpt: Best Man Speech"}
                    </div>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__alOcr
                    )}
                  >
                    {
                      "...we'd both reached for the last chicken wing at the same time. Now, any other man might've just relinquished the wing, but not Alex.\nInstead, he looked me straight in the eye and said, \"How about we split it?\" "
                    }
                  </div>
                </Card>
              </div>
              <div className={classNames(projectcss.all, sty.column__tgfoK)}>
                <Card
                  className={classNames("__wab_instance", sty.card__jdDAz)}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qtcrJ
                      )}
                    >
                      {"Excerpt: Older Sister Maid of Honor"}
                    </div>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lL8Mm
                    )}
                  >
                    {
                      "...know that just like our road trips, there might be unexpected turns, maybe a few wrong exits, but with Jessie by your side, every moment will be an adventure worth cherishing."
                    }
                  </div>
                </Card>
              </div>
              <div className={classNames(projectcss.all, sty.column__zBpCo)}>
                <Card
                  className={classNames("__wab_instance", sty.card__ziAz6)}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9C1LU
                      )}
                    >
                      {"Excerpt: Best Man Speech"}
                    </div>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oiBCg
                    )}
                  >
                    {
                      "Now, let's discuss Mehmet's cooking skills, or the lack thereof. Remember when he attempted to make spaghetti for the first time? He thought 'al dente' was an Italian chef and that pasta sauce was supposed to be a solid. But hey, he served it with pride."
                    }
                  </div>
                </Card>
              </div>
            </div>
            <div
              data-plasmic-name={"examples2"}
              data-plasmic-override={overrides.examples2}
              className={classNames(projectcss.all, sty.examples2)}
            >
              <div className={classNames(projectcss.all, sty.column__oLHv3)}>
                <Card
                  className={classNames("__wab_instance", sty.card__hldAf)}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m6G3T
                      )}
                    >
                      {"Excerpt: Maid of Honor Speech for Amanda"}
                    </div>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qyyLe
                    )}
                  >
                    {
                      "Good evening ladies and gents! For those who don't recognize me after my bridal makeover - no I'm not Jennifer Aniston, I'm still plain old Jessie..."
                    }
                  </div>
                </Card>
              </div>
              <div className={classNames(projectcss.all, sty.column__pZaq)}>
                <Card
                  className={classNames("__wab_instance", sty.card__cWbxt)}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hnG9C
                      )}
                    >
                      {"Excerpt: Best Man Speech"}
                    </div>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fwtOs
                    )}
                  >
                    {
                      "Last time I waited for John, I came with a flip phone. When he texted 'Just parked! Where you at?', I replied using voice commands on my smartwatch..."
                    }
                  </div>
                </Card>
              </div>
              <div className={classNames(projectcss.all, sty.column__mk2Ae)}>
                <Card
                  className={classNames("__wab_instance", sty.card__o8Vl5)}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__olrrb
                      )}
                    >
                      {"Excerpt: Mother of the Bride Speech"}
                    </div>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eCtz0
                    )}
                  >
                    {
                      "Chloe, from the day you were born, you've been the beacon of light in our lives. Your laughter, your tears, your achievements \u2013 every moment has been a gift. And today, as you stand beside Liam, I'm overwhelmed with happiness."
                    }
                  </div>
                </Card>
              </div>
            </div>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"process"}
            data-plasmic-override={overrides.process}
            hasGap={true}
            className={classNames(projectcss.all, sty.process)}
            id={"process"}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ddZCk)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___54RlX
                )}
              >
                {"How does it work?"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gGjha
                )}
              >
                {
                  "Wedding Speech Pro takes your raw memories and feelings to craft a well structured wedding speech that you can be proud of."
                }
              </div>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__oOnJr)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__d8MwW)}
              >
                <div
                  className={classNames(projectcss.all, sty.column__qNdY)}
                  onMouseOver={async event => {
                    const $steps = {};
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__swzo8
                    )}
                  >
                    {"1. Share Your Details:"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fX3Fu
                    )}
                  >
                    {
                      "Enter specific information about the wedding, the couple, personal anecdotes, and your preferred speech style."
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column___21DQt)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hhZfr
                    )}
                  >
                    {"2. AI Analysis:"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hoeV
                    )}
                  >
                    {
                      "Our advanced AI processes your inputs, understanding the nuances and emotions behind them."
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__y2OBr)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8ZJow
                    )}
                  >
                    {"3. Speech Generation:"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lzgi
                    )}
                  >
                    {
                      "Within seconds, the system crafts a personalized wedding speech tailored to your details and preferences."
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__mNWw)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mg91Z
                    )}
                  >
                    {"4. Review & Refine"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3FBxs
                    )}
                  >
                    {
                      "Browse through the generated speech and make any desired tweaks or adjustments to fit your voice."
                    }
                  </div>
                </div>
              </Stack__>
            </div>
            <Button
              className={classNames("__wab_instance", sty.button__mfQk6)}
              color={"yellow"}
              endIcon={
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__bb9W)}
                  role={"img"}
                />
              }
              link={`/speech-wizard`}
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__thaIz)}
                  role={"img"}
                />
              }
              submitsForm={false}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sftzb
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#000000" }}
                  >
                    {"Start now ->"}
                  </span>
                </React.Fragment>
              </div>
            </Button>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"faQs"}
            data-plasmic-override={overrides.faQs}
            hasGap={true}
            className={classNames(projectcss.all, sty.faQs)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__i9Gsa)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0T9Vj
                )}
              >
                {"Frequently Asked Questions"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oqKg3
                )}
              >
                {
                  "Embrace the celebration, speak from the heart, and let us take care of the words"
                }
              </div>
            </Stack__>
            <div className={classNames(projectcss.all, sty.columns__wKrSq)}>
              <div className={classNames(projectcss.all, sty.column__mdwZ)}>
                {(() => {
                  const child$Props = {
                    activeKey: generateStateValueProp($state, [
                      "accordion",
                      "activePanelId"
                    ]),
                    bordered: false,
                    className: classNames("__wab_instance", sty.accordion),
                    defaultActiveKey: "FAQ",
                    destroyInactivePanel: false,
                    expandIconPosition: "end",
                    forceRender: false,
                    ghost: true,
                    items: (
                      <React.Fragment>
                        <AntdAccordionItem
                          className={classNames(
                            "__wab_instance",
                            sty.accordionItem__hOvWe
                          )}
                          forceRender={false}
                          id={1}
                          label2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kizKo
                              )}
                            >
                              {
                                "How personalized will my speech be to my specific event or occasion?"
                              }
                            </div>
                          }
                          showArrow={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qnCyv
                            )}
                          >
                            {
                              "Each speech is crafted based on the information you input into our self-serve portal. The more details you provide about the event, the people involved, and specific stories or points, the more personalized your speech will be"
                            }
                          </div>
                        </AntdAccordionItem>
                        <AntdAccordionItem
                          className={classNames(
                            "__wab_instance",
                            sty.accordionItem___8Xkf5
                          )}
                          id={2}
                          label2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__oxZs
                              )}
                            >
                              {
                                "How quickly will I receive my speech after submitting my details?"
                              }
                            </div>
                          }
                          showArrow={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dfeJe
                            )}
                          >
                            {
                              "Once you've completed the input process, you should receive your speech within 5 minutes"
                            }
                          </div>
                        </AntdAccordionItem>
                        <AntdAccordionItem
                          className={classNames(
                            "__wab_instance",
                            sty.accordionItem__cFcKl
                          )}
                          label2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vBCjl
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 600 }}
                                >
                                  {
                                    "What details should I include in the speech. Can you guide me through the process?"
                                  }
                                </span>
                              </React.Fragment>
                            </div>
                          }
                          showArrow={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__g0Mje
                            )}
                          >
                            {
                              "Absolutely. WSP is designed to be user-friendly and will prompt you with questions to help you provide the necessary details for a meaningful speech."
                            }
                          </div>
                        </AntdAccordionItem>
                        <AntdAccordionItem
                          className={classNames(
                            "__wab_instance",
                            sty.accordionItem__r9G3K
                          )}
                          label2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__sWvi5
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 600 }}
                                >
                                  {
                                    "How do you ensure authenticity and genuineness in the speech?"
                                  }
                                </span>
                              </React.Fragment>
                            </div>
                          }
                          showArrow={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___5C4Zq
                            )}
                          >
                            {
                              "Our platform crafts speeches based on real anecdotes, emotions, and details you provide. We use sophisticated algorithms and expert-crafted templates to ensure the final product feels genuine"
                            }
                          </div>
                        </AntdAccordionItem>
                        <AntdAccordionItem
                          className={classNames(
                            "__wab_instance",
                            sty.accordionItem___0YFxW
                          )}
                          label2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nIBp
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 600 }}
                                >
                                  {"How long will the speech be?"}
                                </span>
                              </React.Fragment>
                            </div>
                          }
                          showArrow={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0N3Cn
                            )}
                          >
                            {
                              'The typical length of our speeches is 4-6 minutes", but this can vary based on the details and preferences you provide in the portal'
                            }
                          </div>
                        </AntdAccordionItem>
                      </React.Fragment>
                    ),
                    onChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "activePanelId",
                      ["accordion", "activePanelId"],
                      AntdAccordion_Helpers
                    ),
                    size: "middle"
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "activePanelId",
                        plasmicStateName: "accordion.activePanelId"
                      }
                    ],
                    [],
                    AntdAccordion_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdAccordion
                      data-plasmic-name={"accordion"}
                      data-plasmic-override={overrides.accordion}
                      {...child$Props}
                    />
                  );
                })()}
              </div>
              <div className={classNames(projectcss.all, sty.column__pnosO)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__sVHc)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/wedding_speech_pro/images/weddingPolaroidpng.png",
                    fullWidth: 402,
                    fullHeight: 495,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"callToAction2"}
            data-plasmic-override={overrides.callToAction2}
            hasGap={true}
            className={classNames(projectcss.all, sty.callToAction2)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__hlTNo)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dKpvU
                )}
              >
                {"Ready to Beat Writer's Block?"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tZqA
                )}
              >
                {
                  "Let us do the hard work for you\n\n3 Wedding Speech drafts, in 5 minutes\n\nFor $19"
                }
              </div>
              <Button
                className={classNames("__wab_instance", sty.button__g9PuO)}
                color={"yellow"}
                endIcon={
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__khjua)}
                    role={"img"}
                  />
                }
                link={`/speech-wizard`}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg___68QL)}
                    role={"img"}
                  />
                }
                submitsForm={false}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3WvnD
                  )}
                >
                  {"Get My Speech"}
                </div>
              </Button>
            </Stack__>
          </Stack__>
          <GlobalFooter
            data-plasmic-name={"globalFooter"}
            data-plasmic-override={overrides.globalFooter}
            className={classNames("__wab_instance", sty.globalFooter)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "globalHeader2",
    "hero",
    "presentButtons",
    "socialProof",
    "dataProvider",
    "noResearchRequired",
    "examples",
    "examples4",
    "examples1",
    "examples2",
    "process",
    "faQs",
    "accordion",
    "callToAction2",
    "globalFooter"
  ],
  globalHeader2: ["globalHeader2"],
  hero: ["hero", "presentButtons", "socialProof", "dataProvider"],
  presentButtons: ["presentButtons"],
  socialProof: ["socialProof", "dataProvider"],
  dataProvider: ["dataProvider"],
  noResearchRequired: ["noResearchRequired"],
  examples: ["examples", "examples4", "examples1", "examples2"],
  examples4: ["examples4"],
  examples1: ["examples1"],
  examples2: ["examples2"],
  process: ["process"],
  faQs: ["faQs", "accordion"],
  accordion: ["accordion"],
  callToAction2: ["callToAction2"],
  globalFooter: ["globalFooter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  globalHeader2: typeof GlobalHeader2;
  hero: "div";
  presentButtons: "div";
  socialProof: "section";
  dataProvider: typeof DataProvider;
  noResearchRequired: "div";
  examples: "div";
  examples4: "div";
  examples1: "div";
  examples2: "div";
  process: "div";
  faQs: "div";
  accordion: typeof AntdAccordion;
  callToAction2: "div";
  globalFooter: typeof GlobalFooter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmic_0Homepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmic_0Homepage__VariantsArgs;
    args?: Plasmic_0Homepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmic_0Homepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      Plasmic_0Homepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: Plasmic_0Homepage__ArgProps,
          internalVariantPropNames: Plasmic_0Homepage__VariantProps
        }),
      [props, nodeName]
    );
    return Plasmic_0Homepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic_0Homepage";
  } else {
    func.displayName = `Plasmic_0Homepage.${nodeName}`;
  }
  return func;
}

export const Plasmic_0Homepage = Object.assign(
  // Top-level Plasmic_0Homepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    globalHeader2: makeNodeComponent("globalHeader2"),
    hero: makeNodeComponent("hero"),
    presentButtons: makeNodeComponent("presentButtons"),
    socialProof: makeNodeComponent("socialProof"),
    dataProvider: makeNodeComponent("dataProvider"),
    noResearchRequired: makeNodeComponent("noResearchRequired"),
    examples: makeNodeComponent("examples"),
    examples4: makeNodeComponent("examples4"),
    examples1: makeNodeComponent("examples1"),
    examples2: makeNodeComponent("examples2"),
    process: makeNodeComponent("process"),
    faQs: makeNodeComponent("faQs"),
    accordion: makeNodeComponent("accordion"),
    callToAction2: makeNodeComponent("callToAction2"),
    globalFooter: makeNodeComponent("globalFooter"),

    // Metadata about props expected for Plasmic_0Homepage
    internalVariantProps: Plasmic_0Homepage__VariantProps,
    internalArgProps: Plasmic_0Homepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Wedding Speech Pro | From stress to success in minutes",
      description:
        "Craft heartfelt, witty wedding speeches effortlessly with AI assistance - no research required!",
      ogImageSrc:
        "https://site-assets.plasmic.app/eb770fb69aaf7fb97e27c4975f86b18d.png",
      canonical: ""
    }
  }
);

export default Plasmic_0Homepage;
/* prettier-ignore-end */
