// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sj7u5T6A4j1Xdo61ZkYEWA
// Component: xpRcVremgrh-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import GlobalHeader2 from "../../GlobalHeader2"; // plasmic-import: DWQ8Kd-IAGYP/component
import GlobalFooter from "../../GlobalFooter"; // plasmic-import: wRdBAJMlIHx/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sj7u5T6A4j1Xdo61ZkYEWA/projectcss
import sty from "./PlasmicConfirmationPage.module.css"; // plasmic-import: xpRcVremgrh-/css

createPlasmicElementProxy;

export type PlasmicConfirmationPage__VariantMembers = {};
export type PlasmicConfirmationPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicConfirmationPage__VariantsArgs;
export const PlasmicConfirmationPage__VariantProps =
  new Array<VariantPropType>();

export type PlasmicConfirmationPage__ArgsType = {};
type ArgPropType = keyof PlasmicConfirmationPage__ArgsType;
export const PlasmicConfirmationPage__ArgProps = new Array<ArgPropType>();

export type PlasmicConfirmationPage__OverridesType = {
  root?: Flex__<"div">;
  globalHeader2?: Flex__<typeof GlobalHeader2>;
  columns?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  globalFooter?: Flex__<typeof GlobalFooter>;
};

export interface DefaultConfirmationPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicConfirmationPage__RenderFunc(props: {
  variants: PlasmicConfirmationPage__VariantsArgs;
  args: PlasmicConfirmationPage__ArgsType;
  overrides: PlasmicConfirmationPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicConfirmationPage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicConfirmationPage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicConfirmationPage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <GlobalHeader2
            data-plasmic-name={"globalHeader2"}
            data-plasmic-override={overrides.globalHeader2}
            className={classNames("__wab_instance", sty.globalHeader2)}
          />

          <section className={classNames(projectcss.all, sty.section__kqjpy)}>
            <section className={classNames(projectcss.all, sty.section__uBft2)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iqrrd
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.query.confirmationID;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Thanks! We're making your speech";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </section>
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__in3H5)}>
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"180px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/wedding_speech_pro/images/yourSpeechChampagnepng.png",
                    fullWidth: 1024,
                    fullHeight: 1024,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column__sp4Rv)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dXwzc
                  )}
                >
                  {
                    "Thanks! We're making your speech.\nYou'll receive your speech to you inbox shortly"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jimc7
                  )}
                >
                  {"WeddingSpeechPro.io"}
                </div>
              </div>
            </div>
          </section>
          <GlobalFooter
            data-plasmic-name={"globalFooter"}
            data-plasmic-override={overrides.globalFooter}
            className={classNames("__wab_instance", sty.globalFooter)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "globalHeader2", "columns", "img", "globalFooter"],
  globalHeader2: ["globalHeader2"],
  columns: ["columns", "img"],
  img: ["img"],
  globalFooter: ["globalFooter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  globalHeader2: typeof GlobalHeader2;
  columns: "div";
  img: typeof PlasmicImg__;
  globalFooter: typeof GlobalFooter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicConfirmationPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicConfirmationPage__VariantsArgs;
    args?: PlasmicConfirmationPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicConfirmationPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicConfirmationPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicConfirmationPage__ArgProps,
          internalVariantPropNames: PlasmicConfirmationPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicConfirmationPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicConfirmationPage";
  } else {
    func.displayName = `PlasmicConfirmationPage.${nodeName}`;
  }
  return func;
}

export const PlasmicConfirmationPage = Object.assign(
  // Top-level PlasmicConfirmationPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    globalHeader2: makeNodeComponent("globalHeader2"),
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),
    globalFooter: makeNodeComponent("globalFooter"),

    // Metadata about props expected for PlasmicConfirmationPage
    internalVariantProps: PlasmicConfirmationPage__VariantProps,
    internalArgProps: PlasmicConfirmationPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "WSP | Confirmation Page",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicConfirmationPage;
/* prettier-ignore-end */
