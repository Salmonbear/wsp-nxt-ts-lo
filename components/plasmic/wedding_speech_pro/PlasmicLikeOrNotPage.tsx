// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sj7u5T6A4j1Xdo61ZkYEWA
// Component: 1Fk0CvwEKPw

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import { CmsRowField } from "@plasmicpkgs/plasmic-cms";
import Button from "../../Button"; // plasmic-import: Dy4L9PNlqEQ/component

import { useScreenVariants as useScreenVariantszbPet7MzObh } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: zbPET7mzOBH/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sj7u5T6A4j1Xdo61ZkYEWA/projectcss
import sty from "./PlasmicLikeOrNotPage.module.css"; // plasmic-import: 1Fk0CvwEKPw/css

import ClinkGlassesIcon from "./icons/PlasmicIcon__ClinkGlasses"; // plasmic-import: fMPRsOYqJ1/icon
import CloseFill1Wght400Grad0Opsz48SvgIcon from "./icons/PlasmicIcon__CloseFill1Wght400Grad0Opsz48Svg"; // plasmic-import: 42X2aiEaT/icon
import HeartIcon from "./icons/PlasmicIcon__Heart"; // plasmic-import: S97SCgzHF/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: Fyf7Qxu-8_t/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: 4TEUVO3AnV-/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: 9-7yBs9kVza/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: mDNbn1ZLKrHu/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 5HAw4RHFxpJq/icon

createPlasmicElementProxy;

export type PlasmicLikeOrNotPage__VariantMembers = {};
export type PlasmicLikeOrNotPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicLikeOrNotPage__VariantsArgs;
export const PlasmicLikeOrNotPage__VariantProps = new Array<VariantPropType>();

export type PlasmicLikeOrNotPage__ArgsType = {};
type ArgPropType = keyof PlasmicLikeOrNotPage__ArgsType;
export const PlasmicLikeOrNotPage__ArgProps = new Array<ArgPropType>();

export type PlasmicLikeOrNotPage__OverridesType = {
  root?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  h1?: Flex__<"h1">;
  cmsDataFetcher?: Flex__<typeof CmsQueryRepeater>;
};

export interface DefaultLikeOrNotPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLikeOrNotPage__RenderFunc(props: {
  variants: PlasmicLikeOrNotPage__VariantsArgs;
  args: PlasmicLikeOrNotPage__ArgsType;
  overrides: PlasmicLikeOrNotPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "queryIngredients",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "openAIoutput",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszbPet7MzObh()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicLikeOrNotPage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicLikeOrNotPage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicLikeOrNotPage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            brand={
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__wbNg5
                )}
                component={Link}
                href={"#"}
                platform={"nextjs"}
              >
                <ClinkGlassesIcon
                  className={classNames(projectcss.all, sty.svg__ztd5)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xveZn
                  )}
                >
                  {"Wedding Speech Pro"}
                </div>
              </PlasmicLink__>
            }
            className={classNames("__wab_instance", sty.navigationBar)}
            closeButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__z3Q8)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/close.svg"}
              />
            }
            itemsGap={8}
            menuItems={
              <React.Fragment>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__xwSbr
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  {"Home"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__bfUg2
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  {"About"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__k5Wd3
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  {"Contact"}
                </PlasmicLink__>
              </React.Fragment>
            }
            openButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__mfuyP)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/menu.svg"}
              />
            }
            responsiveBreakpoint={768}
          />

          <Stack__
            as={"section"}
            hasGap={true}
            className={classNames(projectcss.all, sty.section__mCyWd)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Wedding Speech Pro"}
            </h1>
            <div className={classNames(projectcss.all, sty.freeBox__tEHzr)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fVtMy
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontStyle: "italic" }}
                  >
                    {
                      "Get inspired by the best speech openers and notes, easily."
                    }
                  </span>
                </React.Fragment>
              </div>
            </div>
          </Stack__>
          <CmsQueryRepeater
            data-plasmic-name={"cmsDataFetcher"}
            data-plasmic-override={overrides.cmsDataFetcher}
            className={classNames("__wab_instance", sty.cmsDataFetcher)}
            desc={false}
            emptyMessage={
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9L7C0
                    )}
                  >
                    {"No matching published entries found."}
                  </div>
                )}
              </DataCtxReader__>
            }
            forceEmptyState={false}
            forceLoadingState={false}
            limit={0}
            loadingMessage={
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__q3Dz8
                    )}
                  >
                    {"Loading..."}
                  </div>
                )}
              </DataCtxReader__>
            }
            noAutoRepeat={false}
            noLayout={false}
            useDraft={false}
          >
            <DataCtxReader__>
              {$ctx => (
                <div className={classNames(projectcss.all, sty.freeBox__jcrR3)}>
                  <section
                    className={classNames(projectcss.all, sty.section__eeNrn)}
                  >
                    <section
                      className={classNames(projectcss.all, sty.section__sOhu)}
                    >
                      <CmsRowField
                        className={classNames(
                          "__wab_instance",
                          sty.cmsEntryField__dHNbN
                        )}
                        field={"speechGiver"}
                        themeResetClassName={classNames(
                          projectcss.root_reset,
                          projectcss.root_reset_tags,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                      />

                      <CmsRowField
                        className={classNames(
                          "__wab_instance",
                          sty.cmsEntryField__aYsI0
                        )}
                        field={"category"}
                        themeResetClassName={classNames(
                          projectcss.root_reset,
                          projectcss.root_reset_tags,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                      />

                      <CmsRowField
                        className={classNames(
                          "__wab_instance",
                          sty.cmsEntryField__tMosn
                        )}
                        field={"speech"}
                        themeResetClassName={classNames(
                          projectcss.root_reset,
                          projectcss.root_reset_tags,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                      />
                    </section>
                  </section>
                  <section
                    className={classNames(projectcss.all, sty.section__xNkmK)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.columns__rhpd)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__mzC7E
                        )}
                      >
                        <CloseFill1Wght400Grad0Opsz48SvgIcon
                          className={classNames(projectcss.all, sty.svg__m9NCy)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runInteractionProp"] = true
                              ? (() => {
                                  const actionArgs = {};
                                  return (({ eventRef, args }) => {
                                    return eventRef?.(...(args ?? []));
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runInteractionProp"] != null &&
                              typeof $steps["runInteractionProp"] ===
                                "object" &&
                              typeof $steps["runInteractionProp"].then ===
                                "function"
                            ) {
                              $steps["runInteractionProp"] = await $steps[
                                "runInteractionProp"
                              ];
                            }
                          }}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__eeyCx
                        )}
                      >
                        <HeartIcon
                          className={classNames(projectcss.all, sty.svg__faI0Z)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runInteractionProp"] = true
                              ? (() => {
                                  const actionArgs = {};
                                  return (({ eventRef, args }) => {
                                    return eventRef?.(...(args ?? []));
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runInteractionProp"] != null &&
                              typeof $steps["runInteractionProp"] ===
                                "object" &&
                              typeof $steps["runInteractionProp"].then ===
                                "function"
                            ) {
                              $steps["runInteractionProp"] = await $steps[
                                "runInteractionProp"
                              ];
                            }
                          }}
                          role={"img"}
                        />
                      </div>
                    </div>
                  </section>
                </div>
              )}
            </DataCtxReader__>
          </CmsQueryRepeater>
          <div className={classNames(projectcss.all, sty.freeBox__w696C)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__dzZ7Q)}
            >
              <div className={classNames(projectcss.all, sty.column__g3M3)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__k2UtW)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__x3V4A)}
                    displayHeight={"40px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"40px"}
                  />

                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__mul3C)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wks
                      )}
                    >
                      {"Connect with us"}
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0NDrQ
                      )}
                    >
                      <Icon3Icon
                        className={classNames(projectcss.all, sty.svg__uWkwm)}
                        role={"img"}
                      />

                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__q3XL)}
                        role={"img"}
                      />

                      <Icon5Icon
                        className={classNames(projectcss.all, sty.svg___9IOtn)}
                        role={"img"}
                      />
                    </Stack__>
                  </Stack__>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.column__liRx)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__xxrI5)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uae5F
                    )}
                  >
                    {"Product"}
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__m4P6)}
                    color={"clear"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__g8Pju)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__iyt9N)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bdWou
                      )}
                    >
                      {"Pricing"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__a2V9)}
                    color={"clear"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__lStGd)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__b1Fh7)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__odFe3
                      )}
                    >
                      {"Log in"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__pa3Ty)}
                    color={"clear"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__xepVg)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__rJZhM)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sXfMw
                      )}
                    >
                      {"Integrations"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__qhlX)}
                    color={"clear"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__xp4Q2)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__zdKxx)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dOSo
                      )}
                    >
                      {"Insights"}
                    </div>
                  </Button>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.column__deUXv)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__a7MfA)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jovP
                    )}
                  >
                    {"Support"}
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__dOdU1)}
                    color={"clear"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg___5WzM)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__i7Olf)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pjiS
                      )}
                    >
                      {"Documentation"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__q9Xef)}
                    color={"clear"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__hcYe4)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg___3Y2UN)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__w7UNw
                      )}
                    >
                      {"FAQs"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__sSoF)}
                    color={"clear"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg___3ZH7Y)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__pVsAb)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bRSn6
                      )}
                    >
                      {"Status"}
                    </div>
                  </Button>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.column__xC1C)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__iHj1)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zbObc
                    )}
                  >
                    {"Company"}
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button___67Xcu)}
                    color={"clear"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg___0F5FH)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__c0S93)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yZRpc
                      )}
                    >
                      {"About"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__uTetW)}
                    color={"clear"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__ys09Y)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__dhUGf)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__knJeN
                      )}
                    >
                      {"Contact us"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__sZecP)}
                    color={"clear"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__yx0Dh)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__i9GFt)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0Y4CX
                      )}
                    >
                      {"Careers"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__u09Mo)}
                    color={"clear"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__su83J)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg___5NR1V)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kP3Hq
                      )}
                    >
                      {"Media"}
                    </div>
                  </Button>
                </Stack__>
              </div>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navigationBar", "h1", "cmsDataFetcher"],
  navigationBar: ["navigationBar"],
  h1: ["h1"],
  cmsDataFetcher: ["cmsDataFetcher"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  h1: "h1";
  cmsDataFetcher: typeof CmsQueryRepeater;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLikeOrNotPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLikeOrNotPage__VariantsArgs;
    args?: PlasmicLikeOrNotPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLikeOrNotPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLikeOrNotPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLikeOrNotPage__ArgProps,
          internalVariantPropNames: PlasmicLikeOrNotPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLikeOrNotPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLikeOrNotPage";
  } else {
    func.displayName = `PlasmicLikeOrNotPage.${nodeName}`;
  }
  return func;
}

export const PlasmicLikeOrNotPage = Object.assign(
  // Top-level PlasmicLikeOrNotPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    h1: makeNodeComponent("h1"),
    cmsDataFetcher: makeNodeComponent("cmsDataFetcher"),

    // Metadata about props expected for PlasmicLikeOrNotPage
    internalVariantProps: PlasmicLikeOrNotPage__VariantProps,
    internalArgProps: PlasmicLikeOrNotPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Speech Stuff... Inspiration for the best speeches",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLikeOrNotPage;
/* prettier-ignore-end */
