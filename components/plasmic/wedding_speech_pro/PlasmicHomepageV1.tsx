// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sj7u5T6A4j1Xdo61ZkYEWA
// Component: SWVR76-njXY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import GlobalHeader2 from "../../GlobalHeader2"; // plasmic-import: DWQ8Kd-IAGYP/component
import Button from "../../Button"; // plasmic-import: Dy4L9PNlqEQ/component
import { ParallaxWrapper } from "@plasmicpkgs/react-scroll-parallax";
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import { CmsRowField } from "@plasmicpkgs/plasmic-cms";
import GlobalFooter from "../../GlobalFooter"; // plasmic-import: wRdBAJMlIHx/component

import { useScreenVariants as useScreenVariantszbPet7MzObh } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: zbPET7mzOBH/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sj7u5T6A4j1Xdo61ZkYEWA/projectcss
import sty from "./PlasmicHomepageV1.module.css"; // plasmic-import: SWVR76-njXY/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: mDNbn1ZLKrHu/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 5HAw4RHFxpJq/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: RcTLi5Mk7bq/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: bqxbIPzPFDS/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: BvfAcFiGd3i/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: 7cbdHX_8MGV/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: tNrC_1LlbTm/icon
import CloseFill1Wght400Grad0Opsz48SvgIcon from "./icons/PlasmicIcon__CloseFill1Wght400Grad0Opsz48Svg"; // plasmic-import: 42X2aiEaT/icon
import HeartIcon from "./icons/PlasmicIcon__Heart"; // plasmic-import: S97SCgzHF/icon

createPlasmicElementProxy;

export type PlasmicHomepageV1__VariantMembers = {};
export type PlasmicHomepageV1__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepageV1__VariantsArgs;
export const PlasmicHomepageV1__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepageV1__ArgsType = {};
type ArgPropType = keyof PlasmicHomepageV1__ArgsType;
export const PlasmicHomepageV1__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepageV1__OverridesType = {
  root?: Flex__<"div">;
  globalHeader2?: Flex__<typeof GlobalHeader2>;
  h1?: Flex__<"h1">;
  testimonials?: Flex__<"div">;
  parrallaxDifficulties?: Flex__<"div">;
  feelingOverwhelmed?: Flex__<"div">;
  representProduct2?: Flex__<"div">;
  whyChoose?: Flex__<"div">;
  reasonsTo?: Flex__<"div">;
  foreground?: Flex__<"div">;
  foreground2?: Flex__<"div">;
  featuresBenefits?: Flex__<"div">;
  foreground3?: Flex__<"div">;
  callToAction?: Flex__<"div">;
  cmsDataFetcher?: Flex__<typeof CmsQueryRepeater>;
  globalFooter?: Flex__<typeof GlobalFooter>;
};

export interface DefaultHomepageV1Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepageV1__RenderFunc(props: {
  variants: PlasmicHomepageV1__VariantsArgs;
  args: PlasmicHomepageV1__ArgsType;
  overrides: PlasmicHomepageV1__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszbPet7MzObh()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepageV1.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepageV1.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepageV1.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicHomepageV1.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicHomepageV1.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicHomepageV1.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <GlobalHeader2
            data-plasmic-name={"globalHeader2"}
            data-plasmic-override={overrides.globalHeader2}
            className={classNames("__wab_instance", sty.globalHeader2)}
          />

          <section className={classNames(projectcss.all, sty.section__pL9T9)}>
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontStyle: "italic" }}
                >
                  {"The words you need "}
                </span>
                <React.Fragment>{"\n"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontStyle: "italic" }}
                >
                  {"for the people you love"}
                </span>
              </React.Fragment>
            </h1>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__c89Q1
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontStyle: "italic" }}
                >
                  {
                    "Wedding Speech Pro is an AI powered ghost writer that uses your stories and feelings to crafts a personal and memorable speech you can be proud of"
                  }
                </span>
              </React.Fragment>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___1Ld8I)}>
              <Button
                className={classNames("__wab_instance", sty.button___4Ku9F)}
                color={"white"}
                link={"app.weddingspeechpro.io"}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateStateVariable"] = true
                    ? (() => {
                        const actionArgs = {};
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;
                          undefined;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStateVariable"] != null &&
                    typeof $steps["updateStateVariable"] === "object" &&
                    typeof $steps["updateStateVariable"].then === "function"
                  ) {
                    $steps["updateStateVariable"] = await $steps[
                      "updateStateVariable"
                    ];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xLcjc
                  )}
                >
                  {"See Samples"}
                </div>
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__eXw1L)}
                color={"white"}
                link={"app.weddingspeechpro.io"}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateStateVariable"] = true
                    ? (() => {
                        const actionArgs = {};
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;
                          undefined;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStateVariable"] != null &&
                    typeof $steps["updateStateVariable"] === "object" &&
                    typeof $steps["updateStateVariable"].then === "function"
                  ) {
                    $steps["updateStateVariable"] = await $steps[
                      "updateStateVariable"
                    ];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rYqvh
                  )}
                >
                  {"Get Your Speech"}
                </div>
              </Button>
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"testimonials"}
              data-plasmic-override={overrides.testimonials}
              hasGap={true}
              className={classNames(projectcss.all, sty.testimonials)}
            >
              <div className={classNames(projectcss.all, sty.column__lf7Tg)}>
                <div className={classNames(projectcss.all, sty.freeBox__kq2Be)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0SvD7
                    )}
                  >
                    {
                      '"I never thought I would find the right way to express myself in my speech until I found Wedding Speech Pro. Got the laughs and tears I was hoping for" \n\u2013 Amanda, Maid of Honor'
                    }
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__q5K3H)}>
                <div className={classNames(projectcss.all, sty.freeBox__ohigE)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oaZ0V
                    )}
                  >
                    {
                      '"The perfect mix of sentiment and humor. Wedding Speech Pro nailed it!" \n\u2013 Tom, Best Man'
                    }
                  </div>
                </div>
              </div>
            </Stack__>
          </section>
          <Stack__
            as={"section"}
            hasGap={true}
            className={classNames(projectcss.all, sty.section__pr0Wh)}
          >
            <div
              data-plasmic-name={"parrallaxDifficulties"}
              data-plasmic-override={overrides.parrallaxDifficulties}
              className={classNames(projectcss.all, sty.parrallaxDifficulties)}
            >
              <div
                data-plasmic-name={"feelingOverwhelmed"}
                data-plasmic-override={overrides.feelingOverwhelmed}
                className={classNames(projectcss.all, sty.feelingOverwhelmed)}
              >
                <div className={classNames(projectcss.all, sty.columns__lUJh)}>
                  <div
                    className={classNames(projectcss.all, sty.column__v3A3K)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.columns__px6YP)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__maMzY
                        )}
                      >
                        <ParallaxWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.scrollParallax__ygSoc
                          )}
                          speed={50}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__dIcxA
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__k24Ev
                              )}
                            >
                              {"Keep it inclusive"}
                            </div>
                          </div>
                        </ParallaxWrapper>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__zvHKf
                        )}
                      >
                        <ParallaxWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.scrollParallax__kyyce
                          )}
                          previewInEditor={false}
                          speed={35}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__hegHu
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yqK6F
                              )}
                            >
                              {"Don't overdo\nthe jokes"}
                            </div>
                          </div>
                        </ParallaxWrapper>
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column___17XzP)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__dXivu
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#FFFFFF" }}
                        >
                          {"Feeling overwhelmed by your speech?"}
                        </span>
                      </React.Fragment>
                    </h2>
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__wPJ2
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#FFFFFF" }}
                        >
                          {""}
                        </span>
                        <React.Fragment>{"\n"}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#FFFFFF" }}
                        >
                          {"We'll help you simplify the process."}
                        </span>
                      </React.Fragment>
                    </h2>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__f5F4R)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.columns__fWko)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__xOpH4
                        )}
                      >
                        <ParallaxWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.scrollParallax__zG1Cy
                          )}
                          speed={20}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__dj5Ec
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qTkZ
                              )}
                            >
                              {"Don't forget anyone"}
                            </div>
                          </div>
                        </ParallaxWrapper>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__a62I1
                        )}
                      >
                        <ParallaxWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.scrollParallax__dHqjf
                          )}
                          previewInEditor={false}
                          speed={90}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jvxPv
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__htvWe
                              )}
                            >
                              {"Don't go on for \ntoo longs"}
                            </div>
                          </div>
                        </ParallaxWrapper>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"representProduct2"}
              data-plasmic-override={overrides.representProduct2}
              className={classNames(projectcss.all, sty.representProduct2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hqICx
                )}
              >
                {
                  "With so much pressure to give a flawless performance, it's easy to feel overwhelmed. \nThat's why we provide generated speeches to simplify the writing process. \nWith the hard part done, you can focus on refining your content."
                }
              </div>
            </div>
            <div
              data-plasmic-name={"whyChoose"}
              data-plasmic-override={overrides.whyChoose}
              className={classNames(projectcss.all, sty.whyChoose)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"reasonsTo"}
                data-plasmic-override={overrides.reasonsTo}
                hasGap={true}
                className={classNames(projectcss.all, sty.reasonsTo)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__a1BXg)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"foreground"}
                    data-plasmic-override={overrides.foreground}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.foreground)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__suoxk
                      )}
                    >
                      {"Values"}
                    </div>
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2___8Bo7W
                      )}
                    >
                      {"Why Choose WeddingSpeechPro?"}
                    </h2>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lN2Ak
                      )}
                    >
                      {
                        "Weddings are special, and your words should be too. At WeddingSpeechPro, we understand that crafting the perfect speech is about more than stringing sentences together; it's about conveying love, joy, and the unique connection that makes every relationship extraordinary."
                      }
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"foreground2"}
                    data-plasmic-override={overrides.foreground2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.foreground2)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__kReGc)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hxbZa
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zefKq
                          )}
                        >
                          <Icon6Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__bj3U
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__lBswd
                            )}
                          >
                            <Icon6Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___5RS4L
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vd272
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gLlHs
                            )}
                          >
                            {"Personalized Speeches in Seconds:"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xG6S6
                            )}
                          >
                            {
                              "Simply share your relationship to the bride or groom, your desired tone, and any special memories. Our AI-powered speech generator will do the rest, delivering a unique speech tailored just for you."
                            }
                          </div>
                        </Stack__>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__j5T62
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___4Zgep
                          )}
                        >
                          <Icon7Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__s52T
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ndKj9
                            )}
                          >
                            <Icon6Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___7JvBm
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__eyDJj
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__stoln
                            )}
                          >
                            {"Emotion, Humour, and Grace"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qdFqe
                            )}
                          >
                            {
                              "Whether you want to make them laugh, cry, or both, our AI understands human emotions and crafts speeches that resonate with hearts."
                            }
                          </div>
                        </Stack__>
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___030Ry
                      )}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rIIt
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yfnYj
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___27Y5F
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__d960I
                            )}
                          >
                            <Icon6Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___9EiXm
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zgyNz
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___3C2PT
                            )}
                          >
                            {"Edit and Customize Freely"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nEOuT
                            )}
                          >
                            {
                              "our speech, your voice. Edit and personalize your generated speech as much as you wish. Add anecdotes, inside jokes, or loving tributes."
                            }
                          </div>
                        </Stack__>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vUnc0
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dT1Bh
                          )}
                        >
                          <Icon9Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__rcChV
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__kpu8X
                            )}
                          >
                            <Icon6Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__wf58
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___0AzG4
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wegTo
                            )}
                          >
                            {"Secure and Confidential:"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__l5B7K
                            )}
                          >
                            {
                              "We value your privacy and use industry-standard encryption to protect your information. Your speech and personal details are never shared or stored."
                            }
                          </div>
                        </Stack__>
                      </Stack__>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </Stack__>
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"featuresBenefits"}
              data-plasmic-override={overrides.featuresBenefits}
              hasGap={true}
              className={classNames(projectcss.all, sty.featuresBenefits)}
            >
              <Stack__
                as={"section"}
                hasGap={true}
                className={classNames(projectcss.all, sty.section__hntLm)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"foreground3"}
                  data-plasmic-override={overrides.foreground3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.foreground3)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns__zsBcq)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__panEg)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cWnXi
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__d2Xcf
                          )}
                        >
                          {"BENEFITS"}
                        </div>
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__jhRbf
                          )}
                        >
                          {"Get It Just Right"}
                        </h2>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nahLk
                          )}
                        >
                          {
                            "Whether you are looking to infuse humor, tug at heartstrings, or inspire with wisdom, our AI-driven platform offers the flexibility and personal touch to help make your speech just right:"
                          }
                        </div>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button___03Xc5
                          )}
                          color={"clear"}
                          endIcon={
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__yKov6
                              )}
                              role={"img"}
                            />
                          }
                          size={"minimal"}
                          startIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__vEjLg
                              )}
                              role={"img"}
                            />
                          }
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dg0I
                            )}
                          >
                            {"Learn more"}
                          </div>
                        </Button>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__u9VYc)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__z61Z
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ykMpy
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___4OYrX
                            )}
                          >
                            {"Various Speech Types Supported"}
                          </div>
                          <Icon10Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__bVi70
                            )}
                            role={"img"}
                          />
                        </Stack__>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___7Gjkl
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__r6Pe3
                            )}
                          >
                            {"Choose Your Tone"}
                          </div>
                          <Icon10Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__yYxnS
                            )}
                            role={"img"}
                          />
                        </Stack__>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nU4Vn
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gWeNj
                            )}
                          >
                            {"Easy To Complete Survey"}
                          </div>
                          <Icon10Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___5Wue2
                            )}
                            role={"img"}
                          />
                        </Stack__>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__sAxQb
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pUqO9
                            )}
                          >
                            {"Convenient and Fast Generation"}
                          </div>
                          <Icon10Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__u6BcX
                            )}
                            role={"img"}
                          />
                        </Stack__>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__pOKf
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__b484
                            )}
                          >
                            {"Mobile-Friendly Platform"}
                          </div>
                          <Icon10Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__ocla4
                            )}
                            role={"img"}
                          />
                        </Stack__>
                      </div>
                    </div>
                  </Stack__>
                </Stack__>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"callToAction"}
              data-plasmic-override={overrides.callToAction}
              hasGap={true}
              className={classNames(projectcss.all, sty.callToAction)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__bqHkw)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2XjSv
                  )}
                >
                  {"Ready to Beat Writer's Block?"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jtUoP
                  )}
                >
                  {
                    "Embrace the celebration, speak from the heart, and let us take care of the words"
                  }
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button__vJnY7)}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__xftkG)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__qiVgN)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uE0I
                    )}
                  >
                    {"Start now ->"}
                  </div>
                </Button>
              </Stack__>
            </Stack__>
          </Stack__>
          <CmsQueryRepeater
            data-plasmic-name={"cmsDataFetcher"}
            data-plasmic-override={overrides.cmsDataFetcher}
            className={classNames("__wab_instance", sty.cmsDataFetcher)}
            desc={false}
            emptyMessage={
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ayy7S
                    )}
                  >
                    {"No matching published entries found."}
                  </div>
                )}
              </DataCtxReader__>
            }
            forceEmptyState={false}
            forceLoadingState={false}
            limit={0}
            loadingMessage={
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___526Tj
                    )}
                  >
                    {"Loading..."}
                  </div>
                )}
              </DataCtxReader__>
            }
            noAutoRepeat={false}
            noLayout={false}
            useDraft={false}
          >
            <DataCtxReader__>
              {$ctx => (
                <div
                  className={classNames(projectcss.all, sty.freeBox___0F7Ia)}
                >
                  <section
                    className={classNames(projectcss.all, sty.section__m2Aq7)}
                  >
                    <section
                      className={classNames(projectcss.all, sty.section__jEjlP)}
                    >
                      <CmsRowField
                        className={classNames(
                          "__wab_instance",
                          sty.cmsEntryField__b1CLr
                        )}
                        field={"speechGiver"}
                        themeResetClassName={classNames(
                          projectcss.root_reset,
                          projectcss.root_reset_tags,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                      />

                      <CmsRowField
                        className={classNames(
                          "__wab_instance",
                          sty.cmsEntryField__toj29
                        )}
                        field={"category"}
                        themeResetClassName={classNames(
                          projectcss.root_reset,
                          projectcss.root_reset_tags,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                      />

                      <CmsRowField
                        className={classNames(
                          "__wab_instance",
                          sty.cmsEntryField__hd8Bx
                        )}
                        field={"speech"}
                        themeResetClassName={classNames(
                          projectcss.root_reset,
                          projectcss.root_reset_tags,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                      />
                    </section>
                  </section>
                  <section
                    className={classNames(projectcss.all, sty.section__wRlX)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.columns___5UeAh
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__oBclj
                        )}
                      >
                        <CloseFill1Wght400Grad0Opsz48SvgIcon
                          className={classNames(projectcss.all, sty.svg__uw5GU)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runInteractionProp"] = true
                              ? (() => {
                                  const actionArgs = {};
                                  return (({ eventRef, args }) => {
                                    return eventRef?.(...(args ?? []));
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runInteractionProp"] != null &&
                              typeof $steps["runInteractionProp"] ===
                                "object" &&
                              typeof $steps["runInteractionProp"].then ===
                                "function"
                            ) {
                              $steps["runInteractionProp"] = await $steps[
                                "runInteractionProp"
                              ];
                            }
                          }}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__yb1Vw
                        )}
                      >
                        <HeartIcon
                          className={classNames(projectcss.all, sty.svg__xRhIs)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runInteractionProp"] = true
                              ? (() => {
                                  const actionArgs = {};
                                  return (({ eventRef, args }) => {
                                    return eventRef?.(...(args ?? []));
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runInteractionProp"] != null &&
                              typeof $steps["runInteractionProp"] ===
                                "object" &&
                              typeof $steps["runInteractionProp"].then ===
                                "function"
                            ) {
                              $steps["runInteractionProp"] = await $steps[
                                "runInteractionProp"
                              ];
                            }
                          }}
                          role={"img"}
                        />
                      </div>
                    </div>
                  </section>
                </div>
              )}
            </DataCtxReader__>
          </CmsQueryRepeater>
          <GlobalFooter
            data-plasmic-name={"globalFooter"}
            data-plasmic-override={overrides.globalFooter}
            className={classNames("__wab_instance", sty.globalFooter)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "globalHeader2",
    "h1",
    "testimonials",
    "parrallaxDifficulties",
    "feelingOverwhelmed",
    "representProduct2",
    "whyChoose",
    "reasonsTo",
    "foreground",
    "foreground2",
    "featuresBenefits",
    "foreground3",
    "callToAction",
    "cmsDataFetcher",
    "globalFooter"
  ],
  globalHeader2: ["globalHeader2"],
  h1: ["h1"],
  testimonials: ["testimonials"],
  parrallaxDifficulties: ["parrallaxDifficulties", "feelingOverwhelmed"],
  feelingOverwhelmed: ["feelingOverwhelmed"],
  representProduct2: ["representProduct2"],
  whyChoose: ["whyChoose", "reasonsTo", "foreground", "foreground2"],
  reasonsTo: ["reasonsTo", "foreground", "foreground2"],
  foreground: ["foreground"],
  foreground2: ["foreground2"],
  featuresBenefits: ["featuresBenefits", "foreground3"],
  foreground3: ["foreground3"],
  callToAction: ["callToAction"],
  cmsDataFetcher: ["cmsDataFetcher"],
  globalFooter: ["globalFooter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  globalHeader2: typeof GlobalHeader2;
  h1: "h1";
  testimonials: "div";
  parrallaxDifficulties: "div";
  feelingOverwhelmed: "div";
  representProduct2: "div";
  whyChoose: "div";
  reasonsTo: "div";
  foreground: "div";
  foreground2: "div";
  featuresBenefits: "div";
  foreground3: "div";
  callToAction: "div";
  cmsDataFetcher: typeof CmsQueryRepeater;
  globalFooter: typeof GlobalFooter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepageV1__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepageV1__VariantsArgs;
    args?: PlasmicHomepageV1__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepageV1__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepageV1__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepageV1__ArgProps,
          internalVariantPropNames: PlasmicHomepageV1__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepageV1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepageV1";
  } else {
    func.displayName = `PlasmicHomepageV1.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepageV1 = Object.assign(
  // Top-level PlasmicHomepageV1 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    globalHeader2: makeNodeComponent("globalHeader2"),
    h1: makeNodeComponent("h1"),
    testimonials: makeNodeComponent("testimonials"),
    parrallaxDifficulties: makeNodeComponent("parrallaxDifficulties"),
    feelingOverwhelmed: makeNodeComponent("feelingOverwhelmed"),
    representProduct2: makeNodeComponent("representProduct2"),
    whyChoose: makeNodeComponent("whyChoose"),
    reasonsTo: makeNodeComponent("reasonsTo"),
    foreground: makeNodeComponent("foreground"),
    foreground2: makeNodeComponent("foreground2"),
    featuresBenefits: makeNodeComponent("featuresBenefits"),
    foreground3: makeNodeComponent("foreground3"),
    callToAction: makeNodeComponent("callToAction"),
    cmsDataFetcher: makeNodeComponent("cmsDataFetcher"),
    globalFooter: makeNodeComponent("globalFooter"),

    // Metadata about props expected for PlasmicHomepageV1
    internalVariantProps: PlasmicHomepageV1__VariantProps,
    internalArgProps: PlasmicHomepageV1__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Cracking Wedding Speeches in Minutes",
      description:
        "Wedding Speech Pro | Struggling with your wedding speech? We take your information to expertly craft a speech, perfect for any wedding occasion - whether you're the best man, maid of honor, bride, groom, or family member",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepageV1;
/* prettier-ignore-end */
